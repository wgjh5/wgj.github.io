<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo+Github Page搭建个人博客]]></title>
    <!--<url>%2F2019%2F08%2F16%2F%E5%9F%BA%E4%BA%8EHexo%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>-->
    <url>/2019/08/16/%E5%9F%BA%E4%BA%8EHexo%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content type="text"><![CDATA[我的博客 安装前提安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序： Node.js (至少nodejs 6.9) Git 1.先全局安装脚手架1npm install hexo-cli -g 2.搭建博客文件夹1hexo init blog 3.进入建好的文件夹并安装依赖12cd blognpm install 4.开启服务123hexo server //简写hexo s 官方文档 选择主题主题链接 我选择的主题是 ocean 安装1$ git clone https://github.com/zhwangart/hexo-theme-ocean.git themes/ocean 启用目录 theme 中 _config.yml 选择 theme: ocean 1theme: ocean 更新12$ cd themes/ocean$ git pull 配置默认开启相册与关于菜单，关闭 Gitalk 评论功能，需要的同学 true 就可以了，关于 Gitalk 的使用 过程中遇到各种报错，有同样问题的，或者有兴趣想要了解 Gitalk 可以移步看一看。 123456789101112131415161718192021222324252627282930313233343536373839404142# Menumenu: 主页: / 归档: /archives 相册: /gallery 关于: /aboutrss: /atom.xml# Miscellaneousfavicon: /favicon.icobrand: /images/hexo.svg# Ocean 主页视频# 多种格式的视频用于支持不同的浏览器，这里只需要配置好路径，前提是我把视频相关文件统一目录存放。ocean: overlay: true # 可选，false 则 Ocean 视频下方的笔触式遮盖不显示 path: /images/ocean/ # 视频统一存放路径，格式 mp4/ogg/webm brand: /images/hexo-inverted.svg # 可选，一个小 Logo# 内容excerpt_link: 阅读全文...share_text: 分享nav_text: page_prev: 上一页 page_next: 下一页 post_prev: 前一篇 post_next: 后一篇# fancyboxfancybox: true# Local searchsearch_text: 搜索# Gitalkgitalk: enable: false # 默认关闭评论 开启：true clientID: # 申请 GitHub Application 网页上对应的 Client ID 与 Client Secret 参数 clientSecret: # 同上 repo: # 创建的仓库名称 owner: # Github ID admin: # Github ID Ocean 使用了 feathericon 图标库，菜单中的图标定义在“CSS source / css / _partial / navbar.styl”中，可根据需要进行更改或添加。如果你不需要开启 相册 与 关于 菜单，需要删除或者注销掉他们的图标，如下边的示例： 1234567891011121314151617.nav-item &amp;:nth-child(1) // 主页 .nav-item-link &amp;::before content '\f12f' &amp;:nth-child(2) // 归档 .nav-item-link &amp;::before content '\f12a' //&amp;:nth-child(3) // 相册 // .nav-item-link // &amp;::before // content '\f1a9' //&amp;:nth-child(4) // 关于 // .nav-item-link // &amp;::before // content '\f174' 如果你想要开启 Tag（标签）、Categories（分类） 在菜单中显示，请看这里：关于 Ocean 使用中的问题 插件 本地搜索 - 使用插件 hexo-generator-search 生成 xml 索引文件。 1$ npm install hexo-generator-searchdb --save 然后为 hexo 的配置文件 _config.yml 添加插件配置（注意：不是主题的配置文件，主题配置文件 Ocean 已经配置完成）： 123456# hexo-generator-searchdb@1.0.8search: path: search.xml field: post format: html content: true RSS - 如果您想启用RSS，还需要 hexo-generate-feed 插件，仅安装即可，Ocean 已经配置完成。 1$ npm install hexo-generator-feed --save 文章封面图需要写在 markdown 的 Front-matter 区域： 1234567---title: Post namephotos: [ ["img_url"], ["img_url"] ]--- 需要注意的是，这里说的封面图并不是文章配图，文章配图按照 markdown 的语法写就好了！ 相册首先需要创建一个 page ，关于页面也一样需要创建。 1$ hexo new page gallery 然后在编辑 markdown 的时候需要写在 Front-matter 部分，这种写法可能不是特别特别的好，希望能有更好的方法。 1234567---title: Galleryalbums: [ ["img_url","img_caption"], ["img_url","img_caption"] ]--- 文章置顶安装插件 hexo-generator-index-pin-top： 12$ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save 在需要置顶的文章的 Front-matter 区域加上 top: ture ，示例： 123456---title: 新增文章置顶author: zhwangartdate: 2019-07-18 15:45:03top: ture--- 部署到 Github安装 hexo-deployer-git。 修改配置： 12345deploy: type: git repo: &lt;repository url&gt; #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io branch: [branch] #published message: [message] 参考资料：https://hexo.io/zh-cn/docs/deployment 使用 Ocean 过程中遇到了问题？ ocean原文链接 Gittalk评论的使用]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[左滑动删除组件]]></title>
    <!--<url>%2F2019%2F08%2F07%2F%E5%B7%A6%E6%BB%91%E5%8A%A8%E5%88%A0%E9%99%A4%E7%BB%84%E4%BB%B6%2F</url>-->
    <url>/2019/08/07/%E5%B7%A6%E6%BB%91%E5%8A%A8%E5%88%A0%E9%99%A4%E7%BB%84%E4%BB%B6/</url>
    <content type="text"><![CDATA[HTML 12345678910111213141516171819&lt;div class="container" v-if="this.checkIndex==0"&gt; &lt;!-- &lt;div class="page-title"&gt;滑动组件&lt;/div&gt; --&gt; &lt;ul&gt; &lt;li class="list-item " v-if="list.length&gt;0" v-for="(item,index) in list " :key="index" data-type="0"&gt; &lt;div class="list-box" @touchstart.capture="touchStart" @touchend.capture="touchEnd" @click="skip"&gt; &lt;div class="list-content"&gt; &lt;p class="title"&gt;&#123;&#123;item.bankname&#125;&#125;&lt;/p&gt; &lt;p class="tips"&gt;&#123;&#123;item.bankno&#125;&#125;&lt;/p&gt; &lt;!-- &lt;p :class="item.statusClass"&gt;&#123;&#123;item.auditstate&#125;&#125;&lt;/p&gt; --&gt; &lt;p v-if="item.auditstate==1" class="wait"&gt;待验证&lt;/p&gt; &lt;p v-if="item.auditstate==2" class="denied"&gt;已验证&lt;/p&gt; &lt;p v-if="item.auditstate==3" class="discontinued"&gt;已拒绝&lt;/p&gt; &lt;!-- &lt;p class="time"&gt;&#123;&#123;item.time&#125;&#125;&lt;/p&gt; --&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="delete" @click="deleteItem($event,item.bankid)" :data-index="index"&gt;删除&lt;/div&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172//跳转 skip() &#123; if (this.checkSlide()) &#123; this.restSlide(); &#125; else &#123; return false; &#125; &#125;, //滑动开始 touchStart(e) &#123; // 记录初始位置 this.startX = e.touches[0].clientX; &#125;, //滑动结束 touchEnd(e) &#123; // 当前滑动的父级元素 let parentElement = e.currentTarget.parentElement; // 记录结束位置 this.endX = e.changedTouches[0].clientX; // 左滑 if (parentElement.dataset.type == 0 &amp;&amp; this.startX - this.endX &gt; 30) &#123; this.restSlide(); parentElement.dataset.type = 1; &#125; // 右滑 if (parentElement.dataset.type == 1 &amp;&amp; this.startX - this.endX &lt; -30) &#123; this.restSlide(); parentElement.dataset.type = 0; &#125; this.startX = 0; this.endX = 0; &#125;, //判断当前是否有滑块处于滑动状态 checkSlide() &#123; let listItems = document.querySelectorAll(".list-item"); for (let i = 0; i &lt; listItems.length; i++) &#123; if (listItems[i].dataset.type == 1) &#123; return true; &#125; &#125; return false; &#125;, //复位滑动状态 restSlide() &#123; let listItems = document.querySelectorAll(".list-item"); // 复位 for (let i = 0; i &lt; listItems.length; i++) &#123; listItems[i].dataset.type = 0; &#125; &#125;, //删除银行卡 deleteItem(e, bankid) &#123; // 当前索引 let index = e.currentTarget.dataset.index; console.log(bankid); let params = &#123; cardid: bankid &#125;; delebankcard(params).then(r =&gt; &#123; //如果后台删除成功 if (r.data.code == 0) &#123; //删除这个数据 this.list.splice(index, 1); this.$vux.toast.text(r.data.msg, "middle"); &#125; else &#123; return false; &#125; &#125;); // 复位 this.restSlide(); // 删除 &#125;, scss123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178.list-item &#123; position: relative; height: 1.6rem; -webkit-transition: all 0.2s; transition: all 0.2s; &#125; .list-item[data-type="0"] &#123; transform: translate3d(0, 0, 0); &#125; .list-item[data-type="1"] &#123; transform: translate3d(-2rem, 0, 0); &#125; .list-item:after &#123; content: " "; position: absolute; left: 0.2rem; bottom: 0; right: 0; height: rem(1); border-bottom: rem(1) solid #ccc; color: #ccc; -webkit-transform-origin: 0 100%; transform-origin: 0 100%; -webkit-transform: scaleY(0.5); transform: scaleY(0.5); z-index: 2; &#125; .list-item:last-child:after &#123; content: " "; position: absolute; left: 0.2rem; bottom: 0; right: 0; height: rem(1); border-bottom: 0 none; color: #ccc; -webkit-transform-origin: 0 100%; transform-origin: 0 100%; -webkit-transform: scaleY(0.5); transform: scaleY(0.5); z-index: 2; &#125; .list-box &#123; padding: 0.2rem; background: #fff; display: flex; align-items: center; -webkit-box-sizing: border-box; box-sizing: border-box; justify-content: flex-end; position: absolute; top: 0; right: 0; bottom: 0; left: 0; font-size: 0; .wait &#123; width: rem(170); height: rem(54); line-height: rem(54); background-color: #faf7f2; opacity: 0.6; border-radius: rem(30); position: absolute; right: 0; top: rem(18); color: #a4752a; font-weight: bold; font-size: rem(22); &#125; .denied &#123; width: rem(170); height: rem(54); line-height: rem(54); background-color: #ffe9e9; opacity: 0.6; border-radius: rem(30); position: absolute; right: 0; top: rem(18); color: #ff4d4d; font-weight: bold; font-size: rem(22); &#125; .discontinued &#123; width: rem(170); height: rem(54); line-height: rem(54); background-color: #eeeeee; opacity: 0.6; border-radius: rem(30); position: absolute; right: 0; top: rem(18); color: #777777; font-weight: bold; font-size: rem(22); &#125; &#125; .list-item .list-img &#123; display: block; // width: 1rem; height: 1rem; &#125; .list-item .list-content &#123; // padding: 0.1rem 0 0.1rem 0.2rem; position: relative; flex: 1; flex-direction: column; align-items: flex-start; justify-content: center; overflow: hidden; &#125; .list-item .title &#123; display: block; color: #333; overflow: hidden; font-size: rem(26); // line-height: rem(46); font-weight: bold; text-overflow: ellipsis; white-space: nowrap; margin-left: rem(20); text-align: left; &#125; .titleCredit &#123; height: rem(75); line-height: rem(75); &#125; .list-item .tips &#123; display: block; overflow: hidden; text-align: left; color: #8e8e8e; font-size: rem(14); font-weight: normal; line-height: rem(50); text-overflow: ellipsis; white-space: nowrap; margin-left: rem(20); letter-spacing: rem(4); &#125; // .list-item .time &#123; // display: block; // font-size: 12px; // position: absolute; // right: 0; // top: 0.1rem; // color: #666; // &#125; .list-item .delete &#123; width: rem(110); height: rem(126); background: #ff4949; font-size: rem(30); color: #fff; text-align: center; line-height: rem(126); position: absolute; top: 0; right: -2rem; &#125; .container &#123; overflow: hidden; &#125; 示例图片]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>左滑动删除组件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[运用百度api实现定位城市]]></title>
    <!--<url>%2F2019%2F08%2F07%2F%E8%BF%90%E7%94%A8%E7%99%BE%E5%BA%A6api%E5%AE%9E%E7%8E%B0%E5%AE%9A%E4%BD%8D%E5%9F%8E%E5%B8%82%2F</url>-->
    <url>/2019/08/07/%E8%BF%90%E7%94%A8%E7%99%BE%E5%BA%A6api%E5%AE%9E%E7%8E%B0%E5%AE%9A%E4%BD%8D%E5%9F%8E%E5%B8%82/</url>
    <content type="text"><![CDATA[1.在index.html中写1&lt;script type="text/javascript" src="http://api.map.baidu.com/api?v=2.0&amp;ak=您的密钥"&gt;&lt;/script&gt; 2.在lib里面封装一个getLocation.js12345678910let getCurrentCityName = function() &#123; return new Promise(function(resolve, reject) &#123; let myCity = new BMap.LocalCity() myCity.get(function(result) &#123; resolve(result.name) &#125;) &#125;)&#125;export default getCurrentCityName 3.在你需要定位的文件里面写12345mounted()&#123; getCurrentCityName().then((city)=&gt;&#123; this.locations = city; &#125;)&#125; 参考文档]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>运用百度api实现定位城市</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决Vuex持久化插件-在F5刷新页面后数据不见的问题]]></title>
    <!--<url>%2F2019%2F08%2F07%2F%E8%A7%A3%E5%86%B3vux%E5%88%B7%E6%96%B0%E6%B6%88%E5%A4%B1%E9%97%AE%E9%A2%98%2F</url>-->
    <url>/2019/08/07/%E8%A7%A3%E5%86%B3vux%E5%88%B7%E6%96%B0%E6%B6%88%E5%A4%B1%E9%97%AE%E9%A2%98/</url>
    <content type="text"><![CDATA[vuex优势：相比sessionStorage，存储数据更安全，sessionStorage可以在控制台被看到。 vuex劣势：在F5刷新页面后，vuex会重新更新state，所以，存储的数据会丢失。 为了克服这个问题， vuex-persistedstate出现了~~ 使用方法： 1.安装1cnpm install vuex-persistedstate --save-dev 2. 在store下的index.js中 引入配置12345import createPersistedState from "vuex-persistedstate"const store = new Vuex.Store(&#123; // ... plugins: [createPersistedState()]&#125;) 3.想要存储到sessionStorage，配置如下：1234567import createPersistedState from "vuex-persistedstate"const store = new Vuex.Store(&#123; // ... plugins: [createPersistedState(&#123; storage: window.sessionStorage &#125;)]&#125;) 想使用cookie或localStorage同理 4.vuex-persistedstate默认持久化所有state，指定需要持久化的state,配置如下： 例如，你state中的user想要持久化，就写如下函数 123456789101112import createPersistedState from "vuex-persistedstate"const store = new Vuex.Store(&#123; // ... plugins: [createPersistedState(&#123; storage: window.sessionStorage, reducer(val) &#123; return &#123; // 只储存state中的user user: val.user &#125; &#125; &#125;)] 参考链接：https://www.cnblogs.com/lemoncool/p/9645587.html]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>解决Vuex持久化插件-在F5刷新页面后数据不见的问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决SVN清理失败，显示乱码问题]]></title>
    <!--<url>%2F2019%2F08%2F07%2F%E8%A7%A3%E5%86%B3SVN%E6%B8%85%E7%90%86%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%2F</url>-->
    <url>/2019/08/07/%E8%A7%A3%E5%86%B3SVN%E6%B8%85%E7%90%86%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</url>
    <content type="text"><![CDATA[更新SVN时，提示要清理，但是清理失败，此时什么也操作不了，以下就是解决方案。 情况如图： 解决方案一： 下载splite3 新建一个临时文件夹，使用英文名字，将解压后的sqlite.exe文件复制到这个临时文件夹下 找到你存放文件的SVN文件库中.svn文件夹里的wc.db文件，复制到临时文件夹里。有可能在SVN文件库里找不到.svn文件夹，那是因为隐藏了。 解决方法（win7）：点击菜单栏里的组织选项—&gt;文件夹和搜索选项-&gt;查看/显示隐藏的文件和文件夹 解决方法（win10）：文件—&gt;查看—&gt;隐藏所选项目(勾上图示的两个框框) 进入临时文件夹，cmd运行输入 sqlite3 wc.db 回车，再输入 select * from work_queue; 如果有查询记录了再输入 delete from work_queue; 结束。 下图： 复制临时文件夹里的wc.db，覆盖.svn下的wc.db 执行清理，正常清理，如果清理时显示锁定，且上下级清理都是，勾选清理选项中的解锁选项 最后：再试试cleanup，一开始可能有点慢。 解决方案二： 1,2,3跟方案1 一样 执行.table 把所有表找到。如下图： 5.这里要用到wc_lock这个表，所有执行select * from wc_lock；有个东西。 执行delete from wc_lock; 再查询就没有了。 最后：再试试cleanup，这下也可以成功了。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>解决SVN清理失败，显示乱码问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于watch和computed的结合监听props]]></title>
    <!--<url>%2F2019%2F08%2F07%2F%E5%85%B3%E4%BA%8Ewatch%E5%92%8Ccomputed%E7%9A%84%E7%BB%93%E5%90%88%E7%9B%91%E5%90%ACprops%2F</url>-->
    <url>/2019/08/07/%E5%85%B3%E4%BA%8Ewatch%E5%92%8Ccomputed%E7%9A%84%E7%BB%93%E5%90%88%E7%9B%91%E5%90%ACprops/</url>
    <content type="text"><![CDATA[需求 如果你要根据props传过来的值，来执行函数，你就需要监听，props传过来的值的变化 123456789101112131415161718192021222324252627282930313233343536373839&lt;template&gt; &lt;div class="logo" ref="logo"&gt; &lt;img :src="src" alt=""&gt; &lt;p v-if="status==true"&gt;注册成为英皇宝代理&lt;/p&gt; &lt;/div&gt;&lt;/template&gt; &lt;script&gt;export default &#123; props: ["status"], data() &#123; return &#123; src: require("@/assets/img/sign/logo.png") &#125;; &#125;, //计算传过来的属性 computed: &#123; isShow() &#123; return this.status; &#125; &#125;, watch: &#123; isShow: &#123; //深度监听，可监听到对象、数组的变化 handler(newV, oldV) &#123; // do something, 可使用this console.log(newV, oldV); //根据属性变化改变样式 if (newV == true) &#123; this.$refs.logo.classList.add("agency"); &#125; &#125;, deep: true &#125; &#125;, mounted() &#123; &#125;&#125;;&lt;/script&gt;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>关于watch和computed的结合监听props</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webapp调起浏览器分享]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fwebapp%E5%88%86%E4%BA%AB%2F</url>-->
    <url>/2019/08/07/webapp%E5%88%86%E4%BA%AB/</url>
    <content type="text"><![CDATA[起因 最近在做一个新闻资讯页，有分享的功能，在参考了很多的资料后，有以下总结。 兼容性 移动端几乎所有浏览器都支持分享到QQ和QQ空间 QQ浏览器 UC浏览器 微信自带浏览器 QQ自带浏览器 QQ空间APP 百度浏览器 百度APP自带浏览器 ios 搜狗浏览器 支持分享到web微博 即将支持(android 搜狗浏览器，微博APP） 存在的问题 安卓的QQ自带浏览器不支持.com以外的域名后缀。可能会支持.cn,.com.cn，但明确不支持.me,.io这个具体可以自己测试。 安卓的QQ自带浏览器分享url必须跟页面url同一个域名，否则所有设置不生效。 安卓的QQ自带浏览器无法直接分享 虽然几乎所有的浏览器都支持分享到QQ和QQ空间，但是webview中基本都会不支持。我也很难判断当前浏览器是否支持，浏览器是否唤起QQ APP我也很难判断，所有除了上述支持的浏览器，APP外其他情况调用分享到QQ我也会抛出异常。 UC浏览器安卓端不能设置icon 百度浏览器，百度APP不能直接分享 QQ空间APP，微信自带浏览器只能设置文案，分享需要用户手动点击右上角 示例：demo 用法(vue)Nativeshare 在观察了一圈后，发现这个方式还是有一些缺陷的，于是我就在vue中做了一些简单的出力，把这个分享封装成一个组件的形式，当遇到不支持的浏览器时，直接采取URL Scheme让客户复制链接并分享的微信，在微信内就是直接复制链接。 1.先引入NativeShare.js(我用的是在index.html中的script方式引入) 1&lt;script type="text/javascript" src="static/NativeShare.js"&gt;&lt;/script&gt; 2.在components新建组件sharePopup.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176&lt;template&gt;&lt;div class=&quot;shareAll&quot;&gt; &lt;popup class=&quot;popup_data telArea&quot; v-model=&quot;showPopup&quot; @on-hide=&quot;hide&quot;&gt; &lt;div&gt; &lt;!--支持的情况下--&gt; &lt;div v-if=&quot;showWXGo==1&quot;&gt; &lt;div @click=&quot;call(&apos;wechatFriend&apos;)&quot; class=&quot;langue&quot;&gt;微信好友&lt;/div&gt; &lt;div @click=&quot;call(&apos;wechatTimeline&apos;)&quot; class=&quot;langue&quot;&gt;朋友圈&lt;/div&gt; &lt;div @click=&quot;call(&apos;qqFriend&apos;)&quot; class=&quot;langue&quot;&gt;QQ&lt;/div&gt; &lt;div @click=&quot;call(&apos;qZone&apos;)&quot; class=&quot;langue&quot;&gt;QQ空间&lt;/div&gt; &lt;div @click=&quot;call(&apos;weibo&apos;)&quot; class=&quot;langue&quot;&gt;分享到微博&lt;/div&gt; &lt;/div&gt; &lt;!--不支持的情况下--&gt; &lt;div v-if=&quot;showWXGo==2&quot;&gt; &lt;div class=&quot;langue&quot; v-clipboard:copy=&quot;shareConfig.url&quot; v-clipboard:success=&quot;onCopy&quot; v-clipboard:error=&quot;onError&quot; @click=&quot;shareWX&quot;&gt; 复制链接并分享到微信 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;langue&quot; @click=&quot;shareSina&quot; v-if=&quot;showWXGo!=1&quot;&gt; 分享到微博 &lt;/div&gt; &lt;div class=&quot;langue&quot; v-clipboard:copy=&quot;shareConfig.url&quot; v-clipboard:success=&quot;onCopy&quot; v-clipboard:error=&quot;onError&quot;&gt; 复制链接 &lt;/div&gt; &lt;div @click=&quot;call()&quot; class=&quot;langue&quot; v-if=&quot;showWXGo==1&quot;&gt;更多&lt;/div&gt; &lt;div class=&quot;langue cancels&quot; @click=&quot;hide&quot;&gt; 取消 &lt;/div&gt; &lt;/div&gt; &lt;/popup&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: [&quot;showShare&quot;, &quot;shareConfig&quot;], data() &#123; return &#123; chooseText: [&quot;&quot;], mshare: &quot;&quot;, share_obj: &quot;&quot;, showWXGo: false, //false为既不是qq,也不是UC showChrome: false, nativeShare: new NativeShare(),//初始化 nativeShare shareData: &#123;&#125; &#125;; &#125;, computed: &#123; showPopup: &#123; get() &#123; return this.showShare; &#125;, set(newVal) &#123;&#125; &#125; &#125;, methods: &#123; shareTest() &#123; this.shareData = &#123; title: this.shareConfig.title, desc: this.shareConfig.desc, // 如果是微信该link的域名必须要在微信后台配置的安全域名之内的。 link: this.shareConfig.url, icon: this.shareConfig.img, // 不要过于依赖以下两个回调，很多浏览器是不支持的 success: function() &#123; alert(&quot;分享成功&quot;); &#125;, fail: function() &#123; alert(&quot;您的浏览器不支持该分享功能，请手动复制链接!&quot;); &#125; &#125;; this.nativeShare.setShareData(this.shareData); &#125;, call(command) &#123; this.shareTest(); try &#123; this.nativeShare.call(command); this.hide(); &#125; catch (err) &#123; // 如果不支持，你可以在这里做降级处理 alert(&quot;您的浏览器不支持该分享功能，请手动复制链接!&quot;); &#125; &#125;, confirm() &#123; this.$parent.$emit(&quot;showShare&quot;, false); this.hide(); &#125;, //复制成功执行的函数 onCopy(e) &#123; this.hide(); this.$vux.toast.text(&quot;链接复制成功!&quot;, &quot;middle&quot;); &#125;, //复制失败执行的函数 onError(e) &#123; this.hide(); if (e.text == this.shareConfig.url) &#123; this.$vux.toast.text(&quot;链接复制成功!&quot;, &quot;middle&quot;); &#125; else &#123; this.$vux.toast.text(&quot;链接复制失败!&quot;, &quot;middle&quot;); &#125; &#125;, hide() &#123; this.$parent.$emit(&quot;showShare&quot;, false); &#125;, // 分享微博 shareSina() &#123; //分享到新浪微博 var param = &#123; url: this.shareConfig.url, // type: &quot;2&quot;, // count: &quot;2&quot; /**是否显示分享数，1显示(可选)*/, // appkey:&apos;111&apos;, /**您申请的应用appkey,显示分享来源(可选)*/ title: this.shareConfig.title /**分享的文字内容(可选，默认为所在页面的title)*/, pic: this.shareConfig.img /**分享图片的路径(可选)*/, // ralateUid: &quot;6024068761&quot; /**关联用户的UID，分享微博会@该用户(可选)*/, language: &quot;zh_cn&quot; /**设置语言，zh_cn|zh_tw(可选)*/, dpc: this.shareConfig.desc &#125;; console.log(this.shareConfig.img); var temp = []; for (var p in param) &#123; temp.push(p + &quot;=&quot; + encodeURIComponent(param[p] || &quot;&quot;)); &#125; var sharesinastring = &quot;https://service.weibo.com/share/mobile.php?&quot; + temp.join(&quot;&amp;&quot;); this.$router.push(&#123; name: &quot;iframeShare&quot;, query: &#123; link: sharesinastring &#125; &#125;); this.hide(); &#125;, // 普通分享微信 shareWX() &#123; try &#123; window.top.location.replace(&quot;weixin://&quot;); this.hide(); &#125; catch (err) &#123; // 如果不支持，你可以在这里做降级处理 alert(&quot;您的浏览器不支持该分享功能，请手动复制链接!&quot;); &#125; &#125;, mounted() &#123; var UA = navigator.appVersion; var ue = /(iPad).*OS\s([\d_]+)/.test(UA); var le = /(iPod)(.*OS\s([\d_]+))?/.test(UA); var fe = !UA &amp;&amp; /(iPhone\sOS)\s([\d_]+)/.test(UA); var pe = /(Android);?[\s\/]+([\d.]+)?/.test(UA); var wx = /micromessenger/i.test(UA); var chrome = UA.toLowerCase().indexOf(&quot;chrome&quot;); var baidu = /mobile.*baidubrowser/i.test(UA); var Sogou = /SogouMobileBrowser/i.test(UA); var baiduAPP = /baiduboxapp/i.test(UA); var uc = UA.split(&quot;UCBrowser/&quot;).length &gt; 1 ? 1 : 0; var qq = UA.split(&quot;MQQBrowser/&quot;).length &gt; 1 ? 2 : 0; var qqNot = /QQ\/([\d\.]+)/.test(UA); if (uc == 1 || qq == 1 || qq == 2 || baidu || baiduAPP||(Sogou&amp;&amp;!pe)) &#123; this.showWXGo = 1; if (wx || qqNot) &#123; this.showWXGo = 3; &#125; &#125; else if (wx) &#123; this.showWXGo = 3; &#125; else &#123; this.showWXGo = 2; &#125; if (chrome != -1) &#123; this.showChrome = true; &#125; else &#123; this.showChrome = false; &#125; &#125;&#125;;&lt;/script&gt; 父组件调用1234567891011121314151617181920212223242526&lt;sharePopup :showShare=&quot;showShare&quot; :shareConfig=&quot;shareConfig&quot;/&gt;&lt;script&gt; import sharePopup from &quot;../../components/sharePopup&quot;; export default &#123; data() &#123; return &#123; showShare: false, shareConfig: &quot;&quot; &#125;; &#125;, components: &#123; sharePopup &#125;, methods: &#123; sharePage() &#123; this.showShare = true; this.shareConfig = &#123; url: &quot;&quot;, //分享url title: &quot;&quot;, //内容标题 desc: &quot;&quot;, //描述 img: &quot;&quot; //分享的图片 &#125;; &#125;, &#125; &#125;&lt;/script&gt; 单独使用支持ES6模块,AMD，CMD引入 如果你的项目没有模块化。你也可以直接用script标签引入NativeShare.js。可以参考 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import NativeShare from 'nativeshare'// 先创建一个实例var nativeShare = new NativeShare()// 如果你需要在微信浏览器中分享，那么你需要设置额外的微信配置// 特别提示一下微信分享有一个坑，不要分享安全域名以外的链接(具体见jssdk文档)，否则会导致你配置的文案无效// 创建实例应该带参数var nativeShare = new NativeShare(&#123; wechatConfig: &#123; appId: '', timestamp: '', nonceStr: '', signature: '', &#125;, // 让你修改的分享的文案同步到标签里，比如title文案会同步到&lt;title&gt;标签中 // 这样可以让一些不支持分享的浏览器也能修改部分文案，默认都不会同步 syncDescToTag: false, syncIconToTag: false, syncTitleToTag: false,&#125;)// 你也可以在setConfig方法中设置配置参数nativeShare.setConfig(&#123; wechatConfig: &#123; appId: '', timestamp: '', nonceStr: '', signature: '', &#125;&#125;)// 设置分享文案nativeShare.setShareData(&#123; icon: 'https://pic3.zhimg.com/v2-080267af84aa0e97c66d5f12e311c3d6_xl.jpg', link: 'https://github.com/fa-ge/NativeShare', title: 'NativeShare', desc: 'NativeShare是一个整合了各大移动端浏览器调用原生分享的插件', from: '@fa-ge',&#125;)// 唤起浏览器原生分享组件(如果在微信中不会唤起，此时call方法只会设置文案。类似setShareData)try &#123; nativeShare.call() // 如果是分享到微信则需要 nativeShare.call('wechatFriend') // 类似的命令下面有介绍&#125; catch(err) &#123; // 如果不支持，你可以在这里做降级处理&#125; APINativeShare一共只有五个实例方法 getShareData() 获得分享的文案 setShareData() 设置分享的文案 call(command = ‘default’, [options]) 调用浏览器原生的分享组件 setConfig() 设置配置参数和new NativeShare()中设置的一样 getConfig() 获得配置参数 1234567891011121314&#123; icon: '', link: '', title: '', desc: '', from: '', // 以下两个个回调目前只有在微信和百度APP中很好的支持 success: noop, fail: noop, // 只有微信支持 trigger: noop,&#125; 调用call方法时第一个参数是指定用什么命令调用分享组件。目前支持6个命令。分别是 default 默认，调用起底部的分享组件，当其他命令不支持的时候也会调用该命令 wechatTimeline 分享到朋友圈 wechatFriend 分享给微信好友 qqFriend 分享给QQ好友 qZone 分享到QQ空间 weibo 分享到微博 图片示例： 参考链接Nativeshare 参考链接Nativeshare—CSDN vue-native-share 一个vue移动端的h5分享组件 支持的浏览器：UC浏览器，QQ浏览器，百度浏览器 不支持则提示：手动调起浏览器自带的分享面板 1.先下载 1cnpm install vue-native-share --save-dev 2.引入 123456789101112131415161718192021import vueNativeShare from &apos;vue-native-share&apos;components: &#123; vueNativeShare&#125;data () &#123; return &#123; shareMenu: [0,1,2,3,4,5], config: &#123; title: &apos;分享标题&apos;, desc:&apos;描述&apos;, img:&apos;图片地址&apos;, img_title:&apos;图片标题&apos;, link: &apos;当前链接&apos;, success: () =&gt; &#123;console.log(&apos;success&apos;)&#125;, //成功回调 cancel: () =&gt; &#123;console.log(&apos;cancel&apos;)&#125;, //取消回调 &#125;&#125;&lt;vue-native-share :shareMenu=&quot;shareMenu&quot; :config=&quot;config&quot; /&gt; 关于shareMenu shareMenu 分享面板 [0] 微信好友 [1] 朋友圈 [2] 新浪微博 [3] qq好友 [4] qq空间 [5] 更多 不传入shareMenu则默认设为[0,1,2,3,4,5] 图片示例： 推荐： 相对来说，本人更推荐第一种类型，相对来说兼容性更好(毕竟经过本人的亲自升级啦!) 参考链接vue-native-share 参考链接mshare 移动端H5多平台分享实践1 移动端H5多平台分享实践2 原文地址：https://github.com/wgjh5/webapp-share]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>webapp调起浏览器分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018.12.21 vue总结]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue%E6%80%BB%E7%BB%93%2F</url>-->
    <url>/2019/08/07/vue%E6%80%BB%E7%BB%93/</url>
    <content type="text"><![CDATA[一、vue2.9.6版本起步 先安装node环境 Node下载 再安vue的装脚手架 1npm install -g vue-cli 创建项目 1vue init webpack my-project 二、vue3.0版本起步 关于旧版本 Vue CLI 的包名称由 vue-cli 改成了 @vue/cli。 如果你已经全局安装了旧版本的 vue-cli(1.x 或 2.x)，你需要先通过 npm uninstall vue-cli -g 或 yarn global remove vue-cli 卸载它。 1.安装脚手架 1npm install -g @vue/cli 2.检查版本是否安装正确 1vue --version 3.查看版本号 1vue -V 4.创建项目 1vue create weibo 5.定位到该文件夹 1cd weibo 6.启动服务器 1npm run serve 三、在vue2.9.6脚手架用vuxUI配置wux官方文档 1.在项目里安装vux 1npm install vux --save-dev 2.安装vux-loader （这个vux文档中没有明文跟你说要安装的啦） 1npm install vux-loader --save-dev 3.安装less-loader （这个是用以正确编译less源码，否则会出现 ‘ Cannot GET / ‘，自己看package.json，如果安装了，就不用装啦！） 1npm install less less-loader --save-dev 4.在build文件夹下webpack.base.conf.js 文件进行配置 1234567const vuxLoader = require('vux-loader') //【新加上去的】const webpackConfig = originalConfig //【originalConfig就是原来的 //module.exports出去的代码，把它整个赋值给变量 webpackConfig】// 【在最后加多一句，这里就是引用插件vux啦！】module.exports = vuxLoader.merge(webpackConfig, &#123; plugins: ['vux-ui'] &#125;) 5.最后别忘了，在resolve: { extensions: [‘.js’, ‘.vue’, ‘.json’,’.less’]里加入.less。 1resolve: &#123; extensions: ['.js', '.vue', '.json','.less'] 6.webpack.base.conf.js整体代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394'use strict'const path = require('path')const utils = require('./utils')const config = require('../config')const vueLoaderConfig = require('./vue-loader.conf')const vuxLoader = require('vux-loader') function resolve (dir) &#123; return path.join(__dirname, '..', dir)&#125;const createLintingRule = () =&gt; (&#123;//test: /\.(js|vue)$/,//loader: 'eslint-loader',//enforce: 'pre',//include: [resolve('src'), resolve('test')],//options: &#123;// formatter: require('eslint-friendly-formatter'),// emitWarning: !config.dev.showEslintErrorsInOverlay//&#125;&#125;)const webpackConfig = &#123; context: path.resolve(__dirname, '../'), entry: &#123; app: './src/main.js' &#125;, output: &#123; path: config.build.assetsRoot, filename: '[name].js', publicPath: process.env.NODE_ENV === 'production' ? config.build.assetsPublicPath : config.dev.assetsPublicPath &#125;, resolve: &#123; extensions: ['.js', '.vue', '.json','.less'], alias: &#123; 'vue$': 'vue/dist/vue.esm.js', '@': resolve('src'), &#125; &#125;, module: &#123; rules: [ ...(config.dev.useEslint ? [createLintingRule()] : []), &#123; test: /\.vue$/, loader: 'vue-loader', options: vueLoaderConfig &#125;, &#123; test: /\.js$/, loader: 'babel-loader', include: [resolve('src'), resolve('test'), resolve('node_modules/webpack-dev-server/client')] &#125;, &#123; test: /\.(png|jpe?g|gif|svg)(\?.*)?$/, loader: 'url-loader', options: &#123; limit: 10000, name: utils.assetsPath('img/[name].[hash:7].[ext]') &#125; &#125;, &#123; test: /\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/, loader: 'url-loader', options: &#123; limit: 10000, name: utils.assetsPath('media/[name].[hash:7].[ext]') &#125; &#125;, &#123; test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/, loader: 'url-loader', options: &#123; limit: 10000, name: utils.assetsPath('fonts/[name].[hash:7].[ext]') &#125; &#125; ] &#125;, node: &#123; // prevent webpack from injecting useless setImmediate polyfill because Vue // source contains it (although only uses it if it's native). setImmediate: false, // prevent webpack from injecting mocks to Node native modules // that does not make sense for the client dgram: 'empty', fs: 'empty', net: 'empty', tls: 'empty', child_process: 'empty' &#125;&#125;module.exports = vuxLoader.merge(webpackConfig, &#123; plugins: ['vux-ui'] &#125;) 7.需要什么在main.js里面引入即可，例如 1234import &#123; Tab, TabItem &#125; from 'vux'Vue.component('tab', Tab)Vue.component('tab-item', TabItem) 四、底部导航制作步骤 思路：底部导航动态切换的是路由 ，然后当你点击前有个未选中时的颜色，点击后有个选中时的颜色，这时图片就要动态切换路径，文字就要动态设置颜色，我用的是组件复用的方式，当你点击时通知向vuex仓库传递索引，别的页面拿到索引，动态选中颜色 1.先下载vue-router 1npm install vue-router --save-dev 2.在src里面新建router文件夹，在router里面新建index.js文件,搭建好路由 12345678910111213141516171819202122232425262728293031323334353637import Vue from 'vue'import Router from ' 'Vue.use(Router)export default new Router(&#123; routes: [&#123; path: '/', name: 'home', redirect: '/home' &#125;, &#123; path: '/home', name: 'home', component: resolve =&gt; require(['@/pages/Home.vue'], resolve), &#125;, &#123; path: '/transaction', name: 'transaction', component: resolve =&gt; require(['@/pages/Transaction.vue'], resolve), &#125;, &#123; path: '/athletics', name: 'athletics', component: resolve =&gt; require(['@/pages/Athletics.vue'], resolve), &#125;, &#123; path: '/information', name: 'information', component: resolve =&gt; require(['@/pages/Information.vue'], resolve), &#125;, &#123; path: '/mine', name: 'mine', component: resolve =&gt; require(['@/pages/Mine.vue'], resolve), &#125; ]&#125;) 3.新建footerBar搭建结构 dom结构 12345678910111213&lt;template&gt; &lt;div class="footer"&gt; &lt;ul&gt; &lt;li v-for="(f,index) in footerBar" :key="index" :class="&#123;active:idx==index&#125;" @click="toggle(index)"&gt; &lt;img :src='idx===index?f.selectSrc:f.src' alt=""&gt; &lt;span&gt;&#123;&#123;f.title&#125;&#125;&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/template&gt; js逻辑 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&lt;script&gt;export default &#123; data() &#123; return &#123; idx: 0, footerBar: [ &#123; title: "首页", path: "home", src: require("@/assets/img/home/home.png"), selectSrc: require("@/assets/img/home/homeSelect.png") &#125;, &#123; title: "交易", path: "transaction", src: require("@/assets/img/home/transaction.png"), selectSrc: require("@/assets/img/home/transactionSelect.png") &#125;, &#123; title: "竞技", path: "athletics", src: require("@/assets/img/home/athletics.png"), selectSrc: require("@/assets/img/home/athleticsSelect.png") &#125;, &#123; title: "资讯", path: "information", src: require("@/assets/img/home/information.png"), selectSrc: require("@/assets/img/home/informationSelect.png") &#125;, &#123; title: "我的", path: "mine", src: require("@/assets/img/home/mine.png"), selectSrc: require("@/assets/img/home/mineSelect.png") &#125; ] &#125;; &#125;, methods: &#123; toggle(index) &#123; this.idx = index; this.$store.dispatch("setIndex", index); this.$router.push(&#123; name: this.footerBar[index].path &#125;); &#125;, setChannel(idx) &#123; var route = this.$router.history.current.path; // route = route.split("/"); switch (route) &#123; case "/home": this.idx = 0; break; case "/transaction": this.idx = 1; break; case "/athletics": this.idx = 2; break; case "/information": this.idx = 3; break; case "/mine": this.idx = 4; break; default: this.idx = 0; &#125; &#125; &#125;, computed: &#123;&#125;, mounted() &#123; this.idx = this.$store.getters.getidx; this.setChannel(); &#125;&#125;;&lt;/script&gt; css样式 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;style scoped lang='scss'&gt;@import "../assets/css/reset.scss";.footer &#123; position: fixed; bottom: 0; left: 0; width: 100%;&#125;ul &#123; font-family: PingFangSC-Regular; display: flex; font-size: 1.375rem; justify-content: space-around;&#125;ul li &#123; position: relative; display: flex; flex-direction: column; justify-content: space-around; padding-top: rem(22); align-items: center;&#125;li.active::after &#123; content: ""; display: block; position: absolute; top: 0; left: rem(-18); width: rem(90); height: rem(5); border-radius: rem(40); background-color: #c59b59;&#125;.active &#123; color: #c59b59;&#125;ul li span &#123; line-height: rem(50); font-size: rem(22);&#125;img &#123; width: rem(44);&#125;&lt;/style&gt; 4.在src文件夹里面新建store，里面新建index.js 1234567891011121314151617181920212223242526import Vue from 'vue'import Vuex from 'vuex'Vue.use(Vuex)export default new Vuex.Store(&#123; state: &#123; idx: 0 &#125;, getters: &#123; getidx: state =&gt; &#123; return state.idx &#125;, &#125;, mutations: &#123; editiIndex(state, data) &#123; state.idx = data &#125; &#125;, actions: &#123; setIndex(conText, data) &#123; conText.commit('editiIndex', data); &#125; &#125;&#125;); ##]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>2018.12.21 vue总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue中websocket用法及封装]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue%E4%B8%ADwebsocket%E7%94%A8%E6%B3%95%E5%8F%8A%E5%B0%81%E8%A3%85%2F</url>-->
    <url>/2019/08/07/vue%E4%B8%ADwebsocket%E7%94%A8%E6%B3%95%E5%8F%8A%E5%B0%81%E8%A3%85/</url>
    <content type="text"><![CDATA[1.先下载1cnpm install vue-socket.io --save-dev 2.在src文件夹里面新建lib文件夹，在lib文件夹里面新建socket.js1234567891011121314151617181920212223242526272829303132import Vue from 'vue'import VueSocketIO from 'vue-socket.io'import axios from 'axios';var a;var wesocket = &#123; debug: true, connection: "", vuex: &#123;&#125;&#125;//ajax请求接口返回websocket连接axios(&#123; method: 'GET', url: 'http://192.168.0.110:8091/api/getpushurl', headers: &#123; 'Content-Type': 'application/json' &#125;,&#125;).then(function(response) &#123; wesocket.connection = response.data + '/price'; if (wesocket.connection != "") &#123; Vue.use(new VueSocketIO(wesocket)) &#125; console.log(response.data)&#125;);export default a; 3.在main.js引入12345678910import VueSocketIO from './lib/socket'new Vue(&#123; el: '#app', VueSocketIO, components: &#123; App &#125;, template: '&lt;App/&gt;'&#125;) 4.在组件中的用法123456789101112131415161718//跟methods同级 sockets: &#123; connect() &#123; this.id = this.$socket.id; // this.$socket.emit("sendMessageToServer", "0025520"); //监听connect事件 &#125;, servermessage(data) &#123; // 监听message事件，方法是后台定义和提供的 console.log(data); &#125; &#125;, methods: &#123; // websocket clickButton: function(val) &#123; //添加按钮事件向服务端发送数据 this.$socket.emit("sendMessageToServer", val); &#125;, &#125; 参考链接vue 参考链接ws 参考链接NPM]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue中websocket用法及封装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue中v-touch事件用法]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue%E4%B8%ADv-touch%E4%BA%8B%E4%BB%B6%E7%94%A8%E6%B3%95%2F</url>-->
    <url>/2019/08/07/vue%E4%B8%ADv-touch%E4%BA%8B%E4%BB%B6%E7%94%A8%E6%B3%95/</url>
    <content type="text"><![CDATA[1.先下载1cnpm install vue-touch@next --save dev 2.在main.js引入12import VueTouch from 'vue-touch'Vue.use(VueTouch, &#123; name: 'v-touch' &#125;) 3.用法123&lt;v-touch v-on:swipeup="goRegister"&gt; &lt;img src="../../assets/img/sign/login.png" alt=""&gt;&lt;/v-touch&gt;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue中v-touch事件用法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue中scss的用法]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue%E4%B8%ADscss%E7%9A%84%E7%94%A8%E6%B3%95%2F</url>-->
    <url>/2019/08/07/vue%E4%B8%ADscss%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content type="text"><![CDATA[1.在src文件夹里面新建assets文件夹2.在asstes文件夹里面新建css文件夹 3.在css文件夹里面新建mixin.scss和reset.scss,如下图 4.在app.vue的mounted里面写1234567mounted()&#123; // 设置html的font-sizedocument.addEventListener("DOMContentLoaded", function() &#123; const html = document.querySelector("html"); html.style.fontSize = window.innerWidth / 10 + "px";&#125;);&#125; 5.用法哪个页面需要，就在哪个页面引入reset.scss 123456789&lt;style lang="scss" scoped&gt; @import "../assets/css/reset.scss"; .status &#123; position: absolute; width: rem(690); left: 5%; top: 3%; &#125;&lt;/style&gt; assets源码链接]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue中scss的用法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue中`animate.css`用法]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue%E4%B8%ADanimate.css%E7%94%A8%E6%B3%95%2F</url>-->
    <url>/2019/08/07/vue%E4%B8%ADanimate.css%E7%94%A8%E6%B3%95/</url>
    <content type="text"><![CDATA[1.先下载1cnpm install animate.css --save 2.引入12import animated from 'animate.css' Vue.use(animated) 3.用法123456789 &lt;div v-if="nextStatus==false" ref="statusOne" &lt;!--添加类名的方式--&gt; class="animated rotateInDownRight"&gt; &lt;div class="phone_number code_popup"&gt; &lt;div class="phoneTitle"&gt; &lt;span&gt;+86&lt;/span&gt; &lt;/div&gt; &lt;span&gt;&#123;&#123;phoneNumber&#125;&#125;&lt;/span&gt;&lt;/div&gt; fade title 淡入淡出 fadeIn 淡入 fadeInDown 向下淡入 fadeInDownBig 向下快速淡入 fadeInLeft 向右淡入 fadeInLeftBig 向右快速淡入 fadeInRight 向左淡入 fadeInRightBig 向左快速淡入 fadeInUp 向上淡入 fadeInUpBig 向上快速淡入 fadeOut 淡出 fadeOutDown 向下淡出 fadeOutDownBig 向下快速淡出 fadeOutLeft 向左淡出 fadeOutLeftBig 向左快速淡出 adeOutRight 向右淡出 fadeOutRightBig 向右快速淡出 fadeOutUp 向上淡出 fadeOutUpBig 向上快速淡出 bounce title 弹跳类 bounceIn 弹跳进入 bounceInDown 向下弹跳进入 bounceInLeft 向右弹跳进入 bounceInRight 向左弹跳进入 bounceInUp 向上弹跳进入 bounceOut 弹跳退出 bounceOutDown 向下弹跳退出 bounceOutLeft 向左弹跳退出 bounceOutRight 向右弹跳退出 bounceOutUp 向上弹跳退出 zoom title 缩放类 zoomIn 放大进入 zoomInDown 向下放大进入 zoomInLeft 向右放大进入 zoomInRight 向左放大进入 zoomInUp 向上放大进入 zoomOut 缩小退出 zoomOutDown 向下缩小退出 zoomOutLeft 向左缩小退出 zoomOutRight 向右缩小退出 zoomOutUp 向上缩小退出 rotate title 旋转类 rotateIn 顺时针旋转进入 rotateInDownLeft 从左往下旋入 rotateInDownRight 从右往下旋入 rotateInUpLeft 从左往上旋入 rotateInUpRight 从右往上旋入 rotateOut 顺时针旋转退出 rotateOutDownLeft 向左下旋出 rotateOutDownRight 向右下旋出 rotateOutUpLeft 向左上旋出 rotateOutUpRight 向右上旋出 flip title 翻转类 flipInX 水平翻转进入 flipInY 垂直翻转进入 flipOutX 水平翻转退出 flipOutY 垂直翻转退出 strong title 强调类 bounce 弹跳 flash 闪烁 pulse 脉冲 rubberBand 橡皮筋 shake 左右弱晃动 swing 上下摆动 tada 缩放摆动 wobble 左右强晃动 jello 拉伸抖动]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue中`animate.css`用法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue图片上传及压缩组件的封装]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8F%8A%E5%8E%8B%E7%BC%A9%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%2F</url>-->
    <url>/2019/08/07/vue%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8F%8A%E5%8E%8B%E7%BC%A9%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85/</url>
    <content type="text"><![CDATA[源码地址 使用方法： 先去上面的链接把组件，复制到自己的components文件夹内 1.先下载1cnpm install compressorjs --save-dev //压缩 2.引入组件12345678&lt;script&gt;import uploadPictures from "../../components/uploadPictures";export default &#123; components: &#123; uploadPictures &#125;,&#125;,&lt;/script&gt; 3.用法1234567891011121314//emitType:自定义方法，接收从后端返回的图片码//title：名字，身份证上传、银行卡上传，（需要则传、不需要不传）&lt;uploadPictures :openTitle="&#123;emitType:'idCard',title:$t('m.openingInformation.HKPic')&#125;"/&gt;//在mounted里面监听后端返回的码 mounted() &#123; this.judgeLogin(); this.$on('idCard',msg=&gt;&#123; console.log(msg) &#125;) this.$on('addressCard',msg=&gt;&#123; console.log(msg) &#125;) &#125;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue图片上传及压缩组件的封装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue上传图片与压缩]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8A%E4%BC%A0%E4%B9%8B%E5%89%8D%E7%9A%84%E5%8E%8B%E7%BC%A9%2F</url>-->
    <url>/2019/08/07/vue%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8A%E4%BC%A0%E4%B9%8B%E5%89%8D%E7%9A%84%E5%8E%8B%E7%BC%A9/</url>
    <content type="text"><![CDATA[这其中我一共用了两种做法，推荐第一种，因为第二种在有的苹果手机兼容性不是很好，有时会出现网页奔溃现象 一、compressorjs 方式 1.先下载compressorjs1cnpm install compressorjs --save-dev 2.引入1import Compressor from 'compressorjs'; 3.用法例子template123&lt;template&gt; &lt;input type="file" ref="inputer" @change="addImg" accept="image/*"&gt; &lt;/template&gt; js123456789101112131415161718192021222324// 添加身份证正面addImg() &#123; let self = this; let inputDOM = this.$refs.inputer; // 通过DOM取文件数据 const file = inputDOM.files[0]; //如果file为空return出去 if (!file) &#123; return; &#125; new Compressor(file, &#123; quality: 0.1,//压缩质量 success(result) &#123; const formData = new FormData(); // The third parameter is required for server formData.append('file', result, result.name); //上传图片 let params = formData; uploadimg(params).then(r =&gt; &#123; &#125;); &#125; &#125;);&#125; compressorjs 参考链接 二、image-compressor方式1.先下载1cnpm install image-compressor.js --save-dev 2.再引入1import ImageCompressor from 'image-compressor.js 3.用法例子template123&lt;template&gt; &lt;input type="file" ref="inputer" @change="addImg" accept="image/*"&gt; &lt;/template&gt; js1234567891011121314151617181920// 添加身份证正面addImg() &#123; let self = this; let inputDOM = this.$refs.inputer; const file = inputDOM.files[0]; if (!file) &#123; return; &#125; new ImageCompressor(file, &#123; quality: .6,//压缩质量 success(result) &#123; const formData = new FormData(); formData.append('file', result, result.name); let params = formData; uploadimg(params).then(r =&gt; &#123; &#125;); &#125; &#125;);&#125; image-compressor参考链接]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue上传图片与压缩</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue图片上传]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%2F</url>-->
    <url>/2019/08/07/vue%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
    <content type="text"><![CDATA[html 12345678910111213141516&lt;div class="idCard"&gt; &lt;p&gt;信用卡图像&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;img :src="frontSrc" alt=""&gt; &lt;div&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;信用卡正面图像&lt;/p&gt; &lt;p&gt;（文字清晰，四角齐全）&lt;/p&gt; &lt;/div&gt; &lt;input type="file" ref="inputer" @change="addImg"&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; js1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950data() &#123; return &#123; selfname:"",//自定名称 formDataFront: new FormData(), frontStatus: false, //判断是否提交了身份证正面 imgsFront: &#123;&#125;, //正面 imgLen: 0, frontSrc: "", //身份证正面的图片路径 creditfront: "" &#125;; &#125;,// 上传银行卡图片 addImg() &#123; let inputDOM = this.$refs.inputer; // 通过DOM取文件数据 this.fil = inputDOM.files; // console.log(this.fil) let oldLen = this.imgLen; for (let i = 0; i &lt; this.fil.length; i++) &#123; let size = Math.floor(this.fil[i].size / 1024); console.log("正面==================", size); if (size &gt; 20 * 1024 * 1024) &#123; alert("请选择20M以内的图片！"); return false; &#125; this.imgLen++; this.imgsFront = &#123;&#125;; this.$set( this.imgsFront, this.fil[i].name + "?" + new Date().getTime() + i, this.fil[i] ); &#125; for (let key in this.imgsFront) &#123; let name = key.split("?")[0]; this.formDataFront.append("multipartFiles", this.imgsFront[key], name); &#125; // 上传图片 // console.log(this) let params = this.formDataFront; uploadimg(params).then(r =&gt; &#123; console.log(r.data); if (r.data.Url.length &gt; 0) &#123; this.frontStatus = true; this.creditfront = r.data.Url; //后端返回需要再次发到后端的东西 this.frontSrc = this.$axios + "/Img/Show/" + r.data.Url; &#125; &#125;); &#125;, scss123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566.idCard &#123; padding: 0 rem(30) rem(30) rem(30); p &#123; text-align: left; font-size: rem(24); line-height: rem(84); &#125; ul &#123; display: flex; justify-content: space-between; li &#123; position: relative; width: rem(310); height: rem(200); background-color: #ffffff; border: rem(1) dashed #ccc; div &#123; z-index: 88; p:first-child &#123; width: rem(46); height: rem(46); background: url("../../assets/img/mine/+.png") no-repeat; background-size: cover; margin: rem(40) auto rem(10) auto; &#125; p:nth-child(2) &#123; font-size: rem(26); line-height: rem(30); text-align: center; color: #999999; &#125; p:nth-child(3) &#123; font-size: rem(20); text-align: center; color: #bbbbbb; line-height: rem(40); &#125; &#125; img &#123; width: 100%; height: 100%; position: absolute; left: 0; top: 0; &#125; input &#123; position: absolute; left: 0; top: 0; z-index: 10000; width: 100%; height: 100%; opacity: 0; &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue图片上传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue判断手机移动端]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue%E5%88%A4%E6%96%AD%E6%89%8B%E6%9C%BA%E7%A7%BB%E5%8A%A8%E7%AB%AF%2F</url>-->
    <url>/2019/08/07/vue%E5%88%A4%E6%96%AD%E6%89%8B%E6%9C%BA%E7%A7%BB%E5%8A%A8%E7%AB%AF/</url>
    <content type="text"><![CDATA[12345//App.vue，判断是否为移动端_isMobile() &#123; let flag = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i) return flag;&#125; 12345678910//App.vuemounted() &#123; if (this._isMobile()) &#123; alert("手机端"); this.$router.replace('/m_index'); &#125; else &#123; alert("pc端"); this.$router.replace('/pc_index'); &#125; &#125; 参考链接：https://blog.csdn.net/qq_24744451/article/details/88538398]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue判断手机移动端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue技术点]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue%E6%8A%80%E6%9C%AF%E7%82%B9%2F</url>-->
    <url>/2019/08/07/vue%E6%8A%80%E6%9C%AF%E7%82%B9/</url>
    <content type="text"><![CDATA[2019 2.15一、vue中websocket用法及封装1.先下载1cnpm install vue-socket.io --save-dev 2.在src文件夹里面新建lib文件夹，在lib文件夹里面新建socket.js1234567891011121314151617181920212223242526272829303132import Vue from 'vue'import VueSocketIO from 'vue-socket.io'import axios from 'axios';var a;var wesocket = &#123; debug: true, connection: "", vuex: &#123;&#125;&#125;//ajax请求接口返回websocket连接axios(&#123; method: 'GET', url: 'http://192.168.0.110:8091/api/getpushurl', headers: &#123; 'Content-Type': 'application/json' &#125;,&#125;).then(function(response) &#123; wesocket.connection = response.data + '/price'; if (wesocket.connection != "") &#123; Vue.use(new VueSocketIO(wesocket)) &#125; console.log(response.data)&#125;);export default a; 3.在main.js引入12345678910import VueSocketIO from './lib/socket'new Vue(&#123; el: '#app', VueSocketIO, components: &#123; App &#125;, template: '&lt;App/&gt;'&#125;) 4.在组件中的用法123456789101112131415161718//跟methods同级 sockets: &#123; connect() &#123; this.id = this.$socket.id; // this.$socket.emit("sendMessageToServer", "0025520"); //监听connect事件 &#125;, servermessage(data) &#123; // 监听message事件，方法是后台定义和提供的 console.log(data); &#125; &#125;, methods: &#123; // websocket clickButton: function(val) &#123; //添加按钮事件向服务端发送数据 this.$socket.emit("sendMessageToServer", val); &#125;, &#125; 二、vue md5加密用法1.先下载md51cnpm install js-md5 --save-dev 2.按需引入1234import md5 from "js-md5";//用法Pwd: md5(this.password) 3.或者在main.js文件中将md5转换成vue原型：1234import md5 from 'js-md5';Vue.prototype.$md5 = md5;//用法this.$md5('hello world') // 5eb63bbbe01eeed093cb22bb8f5acdc3 三、vue中v-touch事件用法1.先下载1cnpm install vue-touch@next --save dev 2.在main.js引入12import VueTouch from 'vue-touch'Vue.use(VueTouch, &#123; name: 'v-touch' &#125;) 3.用法123&lt;v-touch v-on:swipeup="goRegister"&gt; &lt;img src="../../assets/img/sign/login.png" alt=""&gt;&lt;/v-touch&gt; 四、运用百度api实现定位城市1.在index.html中写1&lt;script type="text/javascript" src="http://api.map.baidu.com/api?v=2.0&amp;ak=您的密钥"&gt;&lt;/script&gt; 2.在lib里面封装一个getLocation.js12345678910let getCurrentCityName = function() &#123; return new Promise(function(resolve, reject) &#123; let myCity = new BMap.LocalCity() myCity.get(function(result) &#123; resolve(result.name) &#125;) &#125;)&#125;export default getCurrentCityName 3.在你需要定位的文件里面写12345mounted()&#123; getCurrentCityName().then((city)=&gt;&#123; this.locations = city; &#125;)&#125; 参考文档 五、swiper用法1.先下载1cnpm install swiper --save-dev 2.结构12345678910111213&lt;div class="swiper-container"&gt; &lt;div class="swiper-wrapper"&gt; &lt;div class="swiper-slide"&gt; &lt;img src="../../assets/img/mine/shopDetail.png" alt=""&gt;&lt;/div&gt; &lt;div class="swiper-slide"&gt; &lt;img src="../../assets/img/mine/shopDetail2.png" alt=""&gt;&lt;/div&gt; &lt;div class="swiper-slide"&gt; &lt;img src="../../assets/img/mine/shopDetail3.png" alt=""&gt;&lt;/div&gt; &lt;/div&gt; &lt;!-- 如果需要分页器 --&gt; &lt;div class="swiper-pagination"&gt;&lt;/div&gt;&lt;/div&gt; 3.js1234567891011121314151617181920212223242526272829303132//普通水平滑动轮播 swiper() &#123; var mySwiper = new Swiper(".swiper-container", &#123; speed: 500, loop: true, autoplay: &#123; disableOnInteraction: false, delay: 2500 &#125;, pagination: &#123; el: ".swiper-pagination", clickable: true, clickableClass: "my-pagination-clickable" &#125; &#125;); &#125;,//3d手动轮播 swiper() &#123; var mySwiper = new Swiper(".swiper-container", &#123; speed: 500, loop: true, autoplay: &#123; disableOnInteraction: false, delay: 2500 &#125;, pagination: &#123; el: ".swiper-pagination", clickable: true, clickableClass: "my-pagination-clickable" &#125; &#125;); &#125;, 4.样式 备注：样式需另起一个style写，不能用scoped锁住，只有这样才能覆盖swiper的样式， 切记要引入swiper的自带样式，去nodemodules里面找 1234567891011121314151617181920212223242526272829303132333435//分页器样式&lt;style lang="scss"&gt;@import "../../assets/css/reset.scss";@import "../../assets/css/swiper.min.css";.swiper-container .swiper-pagination &#123; width: 100%; height: rem(200); opacity: 1; z-index: 100000; padding-left: rem(315); position: absolute; left: rem(380); top: rem(306); span &#123; display: block; width: rem(12); height: rem(12); background-color: #fff; opacity: 1; float: left; margin-right: rem(20); z-index: 100000; border-radius: 50%; &#125; .swiper-pagination-bullet-active &#123; width: rem(22); height: rem(9); background-color: #e4bc7c; border-radius: rem(5); z-index: 100000; &#125;&#125;&lt;/style&gt; 六、vue中animate.css用法1.先下载1cnpm install animate.css --save 2.引入12import animated from 'animate.css' Vue.use(animated) 3.用法123456789 &lt;div v-if="nextStatus==false" ref="statusOne" &lt;!--添加类名的方式--&gt; class="animated rotateInDownRight"&gt; &lt;div class="phone_number code_popup"&gt; &lt;div class="phoneTitle"&gt; &lt;span&gt;+86&lt;/span&gt; &lt;/div&gt; &lt;span&gt;&#123;&#123;phoneNumber&#125;&#125;&lt;/span&gt;&lt;/div&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879fade: &#123; title: '淡入淡出', fadeIn: '淡入', fadeInDown: '向下淡入', fadeInDownBig: '向下快速淡入', fadeInLeft: '向右淡入', fadeInLeftBig: '向右快速淡入', fadeInRight: '向左淡入', fadeInRightBig: '向左快速淡入', fadeInUp: '向上淡入', fadeInUpBig: '向上快速淡入', fadeOut: '淡出', fadeOutDown: '向下淡出', fadeOutDownBig: '向下快速淡出', fadeOutLeft: '向左淡出', fadeOutLeftBig: '向左快速淡出', adeOutRight: '向右淡出', fadeOutRightBig: '向右快速淡出', fadeOutUp: '向上淡出', fadeOutUpBig: '向上快速淡出' &#125;, bounce: &#123; title: '弹跳类', bounceIn: '弹跳进入', bounceInDown: '向下弹跳进入', bounceInLeft: '向右弹跳进入', bounceInRight: '向左弹跳进入', bounceInUp: '向上弹跳进入', bounceOut: '弹跳退出', bounceOutDown: '向下弹跳退出', bounceOutLeft: '向左弹跳退出', bounceOutRight: '向右弹跳退出', bounceOutUp: '向上弹跳退出' &#125;, zoom: &#123; title: '缩放类', zoomIn: '放大进入', zoomInDown: '向下放大进入', zoomInLeft: '向右放大进入', zoomInRight: '向左放大进入', zoomInUp: '向上放大进入', zoomOut: '缩小退出', zoomOutDown: '向下缩小退出', zoomOutLeft: '向左缩小退出', zoomOutRight: '向右缩小退出', zoomOutUp: '向上缩小退出' &#125;, rotate: &#123; title: '旋转类', rotateIn: '顺时针旋转进入', rotateInDownLeft: '从左往下旋入', rotateInDownRight: '从右往下旋入', rotateInUpLeft: '从左往上旋入', rotateInUpRight: '从右往上旋入', rotateOut: '顺时针旋转退出', rotateOutDownLeft: '向左下旋出', rotateOutDownRight: '向右下旋出', rotateOutUpLeft: '向左上旋出', rotateOutUpRight: '向右上旋出' &#125;, flip: &#123; title: '翻转类', flipInX: '水平翻转进入', flipInY: '垂直翻转进入', flipOutX: '水平翻转退出', flipOutY: '垂直翻转退出' &#125;, strong: &#123; title: '强调类', bounce: '弹跳', flash: '闪烁', pulse: '脉冲', rubberBand: '橡皮筋', shake: '左右弱晃动', swing: '上下摆动', tada: '缩放摆动', wobble: '左右强晃动', jello: '拉伸抖动' &#125; fade title 淡入淡出 fadeIn 淡入 fadeInDown 向下淡入 fadeInDownBig 向下快速淡入 fadeInLeft 向右淡入 fadeInLeftBig 向右快速淡入 fadeInRight 向左淡入 fadeInRightBig 向左快速淡入 fadeInUp 向上淡入 fadeInUpBig 向上快速淡入 fadeOut 淡出 fadeOutDown 向下淡出 fadeOutDownBig 向下快速淡出 fadeOutLeft 向左淡出 fadeOutLeftBig 向左快速淡出 adeOutRight 向右淡出 fadeOutRightBig 向右快速淡出 fadeOutUp 向上淡出 fadeOutUpBig 向上快速淡出 bounce title 弹跳类 bounceIn 弹跳进入 bounceInDown 向下弹跳进入 bounceInLeft 向右弹跳进入 bounceInRight 向左弹跳进入 bounceInUp 向上弹跳进入 bounceOut 弹跳退出 bounceOutDown 向下弹跳退出 bounceOutLeft 向左弹跳退出 bounceOutRight 向右弹跳退出 bounceOutUp 向上弹跳退出 zoom title 缩放类 zoomIn 放大进入 zoomInDown 向下放大进入 zoomInLeft 向右放大进入 zoomInRight 向左放大进入 zoomInUp 向上放大进入 zoomOut 缩小退出 zoomOutDown 向下缩小退出 zoomOutLeft 向左缩小退出 zoomOutRight 向右缩小退出 zoomOutUp 向上缩小退出 rotate title 旋转类 rotateIn 顺时针旋转进入 rotateInDownLeft 从左往下旋入 rotateInDownRight 从右往下旋入 rotateInUpLeft 从左往上旋入 rotateInUpRight 从右往上旋入 rotateOut 顺时针旋转退出 rotateOutDownLeft 向左下旋出 rotateOutDownRight 向右下旋出 rotateOutUpLeft 向左上旋出 rotateOutUpRight 向右上旋出 flip title 翻转类 flipInX 水平翻转进入 flipInY 垂直翻转进入 flipOutX 水平翻转退出 flipOutY 垂直翻转退出 strong title 强调类 bounce 弹跳 flash 闪烁 pulse 脉冲 rubberBand 橡皮筋 shake 左右弱晃动 swing 上下摆动 tada 缩放摆动 wobble 左右强晃动 jello 拉伸抖动]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue技术点</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue给js加版本号]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue%E7%BB%99js%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9C%AC%E5%8F%B7%2F</url>-->
    <url>/2019/08/07/vue%E7%BB%99js%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9C%AC%E5%8F%B7/</url>
    <content type="text"><![CDATA[在build文件里面的webpack.prod.conf.js文件里面加如下代码 12345678910111213141516171819 // 版本号const Version = new Date().getTime();//把output那段改成如下代码output: &#123; path: config.build.assetsRoot, filename: utils.assetsPath('js/[name].[chunkhash].' + Version + '.js'), chunkFilename: utils.assetsPath('js/[id].[chunkhash].' + Version + '.js') &#125;, // 把new ExtractTextPlugin 改成如下代码new ExtractTextPlugin(&#123; filename: utils.assetsPath('css/[name].[contenthash]' + Version + '.css'), allChunks: true &#125;),]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue给js加版本号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue动态绑定类名的几种方法]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E7%B1%BB%E5%90%8D%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%2F</url>-->
    <url>/2019/08/07/vue%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E7%B1%BB%E5%90%8D%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content type="text"><![CDATA[单个判断推荐]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue动态绑定类名的几种方法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-pdf]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue-pdf%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95%2F</url>-->
    <url>/2019/08/07/vue-pdf%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/</url>
    <content type="text"><![CDATA[1.先下载1cnpm install vue-pdf --save-dev 2.在局部引入,使用12345678910111213&lt;template&gt; &lt;pdf src=&quot;./static/relativity.pdf&quot;&gt;&lt;/pdf&gt;&lt;/template&gt;&lt;script&gt;import pdf from &apos;vue-pdf&apos;export default &#123; components: &#123; pdf &#125;&#125;&lt;/script&gt; 例子：可实现放大缩小，翻页功能123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209&lt;template&gt; &lt;div class=&quot;all&quot;&gt; &lt;!-- &lt;Mheader status=&quot;useAgreement&quot; class=&quot;head&quot; /&gt; --&gt; &lt;header&gt; &lt;router-link to=&quot;/main/mine&quot; slot=&quot;left&quot; class=&quot;sprites_all sprites_back&quot;&gt;&lt;/router-link&gt; &lt;div class=&quot;newbankCard&quot;&gt; &lt;span class=&quot;sprites_all sprites_back&quot; @click=&quot;goBack&quot;&gt;&lt;/span&gt; &lt;span class=&quot;pf_thick&quot;&gt;&#123;&#123;clauseTitle&#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/header&gt; &lt;div class=&quot;main&quot;&gt; &lt;!-- &#123;&#123;currentPage&#125;&#125; / &#123;&#123;pageCount&#125;&#125; --&gt; &lt;pdf :src=&quot;src&quot; :page=&quot;currentPage&quot; @progress=&quot;loadedRatio = $event&quot; @num-pages=&quot;pageCount=$event&quot; @page-loaded=&quot;currentPage=$event&quot; @loaded=&quot;loadPdfHandler&quot; ref=&quot;wrapper&quot; class=&quot;pdf&quot;&gt;&lt;/pdf&gt; &lt;!-- &lt;button @click=&quot;changePdfPage(1)&quot;&gt;+&lt;/button&gt; --&gt; &lt;/div&gt; &lt;ul class=&quot;footers&quot;&gt; &lt;li :class=&quot;&#123;select:idx==0&#125;&quot; @touchstart=&quot;idx=0&quot; @touchend=&quot;idx=-1&quot; @click=&quot;scaleD&quot;&gt; &lt;p&gt;放大&lt;/p&gt; &lt;/li&gt; &lt;li :class=&quot;&#123;select:idx==1&#125;&quot; @touchstart=&quot;idx=1&quot; @touchend=&quot;idx=-1&quot; @click=&quot;scaleX&quot;&gt; &lt;p&gt;缩小&lt;/p&gt; &lt;/li&gt; &lt;li :class=&quot;&#123;select:idx==2&#125;&quot; @touchstart=&quot;idx=2&quot; @touchend=&quot;idx=-1&quot; @click=&quot;changePdfPage(0)&quot;&gt; &lt;p&gt;上一页&lt;/p&gt; &lt;/li&gt; &lt;li :class=&quot;&#123;select:idx==3&#125;&quot; @touchstart=&quot;idx=3&quot; @touchend=&quot;idx=-1&quot; @click=&quot;changePdfPage(1)&quot;&gt; &lt;p&gt;下一页&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import pdf from &quot;vue-pdf&quot;; import Mheader from &quot;../Mheader&quot;; export default &#123; components: &#123; pdf, Mheader &#125;, data() &#123; return &#123; currentPage: 1, pageCount: 0, src: &quot;&quot;, // pdf文件地址 scale: 100, //放大系数 idx: -1, clauseTitle: &quot;&quot;, loadedRatio: 0 &#125;; &#125;, created() &#123; // 有时PDF文件地址会出现跨域的情况,这里最好处理一下 let clause = this.$route.query.clause + &quot;&quot;; switch(clause) &#123; case &quot;0&quot;: this.src = &quot;../../../../static/clause/A1.pdf&quot;; this.clauseTitle = &quot;使用者协定&quot;; break; case &quot;1&quot;: this.src = &quot;../../../../static/clause/A2.pdf&quot;; this.clauseTitle = &quot;私隐政策声明&quot;; break; case &quot;2&quot;: this.src = &quot;../../../../static/clause/C1.pdf&quot;; this.clauseTitle = &quot;产品披露及风险声明&quot;; break; case &quot;3&quot;: this.src = &quot;../../../../static/clause/C2.pdf&quot;; this.clauseTitle = &quot;反洗钱及反恐融资声明&quot;; break; case &quot;4&quot;: this.src = &quot;../../../../static/clause/C3.pdf&quot;; this.clauseTitle = &quot;私隐政策声明&quot;; break; case &quot;5&quot;: this.src = &quot;../../../../static/clause/C4.pdf&quot;; this.clauseTitle = &quot;客户协议&quot;; break; case &quot;6&quot;: this.src = &quot;../../../../static/clause/C5.pdf&quot;; this.clauseTitle = &quot;使用者协定&quot;; break; case &quot;7&quot;: this.src = &quot;&quot;; this.clauseTitle = &quot;积分计划&quot;; break; default: this.src = &quot;../../../../static/clause/A1.pdf&quot;; &#125; // this.src = pdf.createLoadingTask(this.src); &#125;, methods: &#123; // 改变PDF页码,val传过来区分上一页下一页的值,0上一页,1下一页 changePdfPage(val) &#123; if(val === 0 &amp;&amp; this.currentPage &gt; 1) &#123; this.currentPage--; &#125; if(val === 1 &amp;&amp; this.currentPage &lt; this.pageCount) &#123; this.currentPage++; &#125; &#125;, goBack() &#123; this.$router.go(-1); &#125;, // pdf加载时 loadPdfHandler(e) &#123; this.currentPage = 1; // 加载的时候先加载第一页 &#125;, //放大 scaleD() &#123; this.scale += 5; // this.$refs.wrapper.$el.style.transform = &quot;scale(&quot; + this.scale + &quot;)&quot;; this.$refs.wrapper.$el.style.width = parseInt(this.scale) + &quot;%&quot;; &#125;, //缩小 scaleX() &#123; if(this.scale == 100) &#123; return; &#125; this.scale += -5; this.$refs.wrapper.$el.style.width = parseInt(this.scale) + &quot;%&quot;; // this.$refs.wrapper.$el.style.transform = &quot;scale(&quot; + this.scale + &quot;)&quot;; &#125; &#125;, mounted() &#123;&#125; &#125;;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt; @import &quot;../../../assets/css/reset.scss&quot;; .all &#123; padding: 0 0 rem(80); header &#123; height: rem(88); position: sticky; top: 0; background-color: #fff; width: 100%; z-index: 400; .sprites_all &#123; position: absolute; left: rem(30); top: rem(24); display: inline-block; width: rem(40); height: rem(40); background: url(&quot;../../../assets/img/transaction/transaction_icon.png&quot;) no-repeat; background-size: rem(400); vertical-align: bottom; background-position: 0 rem(-50); &#125; .sprites_back &#123; background-position: rem(-50) 0; &#125; span &#123; line-height: rem(86); font-size: rem(30); color: $text_3; // font-weight: bold; &#125; border-bottom: 1px solid $line_color; .newbankCard &#123; border-bottom: 1px solid $line_color; &#125; &#125; .main &#123; overflow: auto; &#125; .head &#123; position: fixed; top: 0; height: rem(88); &#125; .footers &#123; position: fixed; bottom: 0; width: 100%; height: rem(100); display: flex; z-index: 100; color: #333; border-top: 1px solid #f0f0f0; line-height: rem(80); background-color: #fff; li &#123; text-align: center; flex: 1; padding: rem(10) 0; p &#123; border-right: 1px solid #f0f0f0; &#125; &#125; li:last-child &#123; p &#123; border-right: 0 none; &#125; &#125; .select &#123; color: #fff; background-color: #c59c5a; p &#123; border-right: 0 none; &#125; &#125; &#125; &#125;&lt;/style&gt; 参考链接：https://www.npmjs.com/package/vue-pdf]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue-pdf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue 移动端 实现div拖拽移动]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvuejs%20%E7%A7%BB%E5%8A%A8%E7%AB%AF%20%E5%AE%9E%E7%8E%B0div%E6%8B%96%E6%8B%BD%E7%A7%BB%E5%8A%A8%2F</url>-->
    <url>/2019/08/07/vuejs%20%E7%A7%BB%E5%8A%A8%E7%AB%AF%20%E5%AE%9E%E7%8E%B0div%E6%8B%96%E6%8B%BD%E7%A7%BB%E5%8A%A8/</url>
    <content type="text"><![CDATA[相关知识点touchstart 当在屏幕上按下手指时触发 touchmove 当在屏幕上移动手指时触发 touchend 当在屏幕上抬起手指时触发mousedown mousemove mouseup对应的是PC端的事件 touchcancel 当一些更高级别的事件发生的时候（如电话接入或者弹出信息）会取消当前的touch操作，即触发touchcancel。一般会在touchcancel时暂停游戏、存档等操作。 html12345678910111213141516&lt;template&gt; &lt;div id="webId"&gt; &lt;div&gt;你的web页面&lt;/div&gt; &lt;!-- 如果碰到滑动问题，1.1 请检查这里是否属于同一点。 --&gt; &lt;!-- 悬浮的HTML --&gt; &lt;div v-if="!isShow" class="xuanfu" id="moveDiv" @mousedown="down" @touchstart="down" //..prevent 防止滑动时，页面也跟着滑动 @mousemove="move" @touchmove.prevent="move" @mouseup="end" @touchend="end" &gt; &lt;div class="yuanqiu"&gt; &#123;&#123;pageInfo.totalPage&#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; js1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;script&gt;data() &#123; return &#123; flags: false, position: &#123; x: 0, y: 0 &#125;, nx: '', ny: '', dx: '', dy: '', xPum: '', yPum: '', &#125;&#125;methods: &#123; // 实现移动端拖拽 down()&#123; this.flags = true; var touch; if(event.touches)&#123; touch = event.touches[0]; &#125;else &#123; touch = event; &#125; this.position.x = touch.clientX; this.position.y = touch.clientY; this.dx = moveDiv.offsetLeft; this.dy = moveDiv.offsetTop; &#125;, move()&#123; if(this.flags)&#123; var touch ; if(event.touches)&#123; touch = event.touches[0]; &#125;else &#123; touch = event; &#125; this.nx = touch.clientX - this.position.x; this.ny = touch.clientY - this.position.y; this.xPum = this.dx+this.nx; this.yPum = this.dy+this.ny; moveDiv.style.left = this.xPum+"px"; moveDiv.style.top = this.yPum +"px"; //阻止页面的滑动默认事件；如果碰到滑动问题，1.2 请注意是否获取到 touchmove document.addEventListener("touchmove",function()&#123; event.preventDefault(); &#125;,false); &#125; &#125;,//鼠标释放时候的函数 end()&#123; this.flags = false; &#125;,&#125;&lt;/script&gt; css12345678910111213141516171819202122232425&lt;style&gt; .xuanfu &#123; height: 4.5rem; width: 4.5rem; /* 如果碰到滑动问题，1.3 请检查 z-index。z-index需比web大一级*/ z-index: 999; position: fixed; top: 4.2rem; right: 3.2rem; border-radius: 0.8rem; background-color: rgba(0, 0, 0, 0.55); &#125; .yuanqiu &#123; height: 2.7rem; width: 2.7rem; border: 0.3rem solid rgba(140, 136, 136, 0.5); margin: 0.65rem auto; color: #000000; font-size: 1.6rem; line-height: 2.7rem; text-align: center; border-radius: 100%; background-color: #ffffff; &#125;&lt;/style&gt; demo]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue 移动端 实现div拖拽移动</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-i18n]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue-i18n%E7%94%A8%E6%B3%95%2F</url>-->
    <url>/2019/08/07/vue-i18n%E7%94%A8%E6%B3%95/</url>
    <content type="text"><![CDATA[vue-i18n1.先下载1cnpm install vue-i18n --save-dev 2.在main.js引入123import VueI18n from 'vue-i18n' Vue.use(VueI18n) // 通过插件的形式挂载 3.在src新建个lib文件夹，里面在新建语言文件夹lang 123456789101112131415161718192021//en.js 英文语言包：export const m = &#123; music: 'Music',//网易云音乐 findMusic: 'FIND MUSIC',//发现音乐 myMusic: 'MY MUSIC',//我的音乐 friend: 'FRIEND',//朋友 musician: 'MUSICIAN',//音乐人 download: 'DOWNLOAD'//下载客户端&#125;//zh.js中文语言包：export const m = &#123; music: '网易云音乐', findMusic: '发现音乐', myMusic: '我的音乐', friend: '朋友', musician: '音乐人', download: '下载客户端'&#125; 3.然后在main.js中写如下代码12345678910111213141516171819202122232425262728293031// 判断当前是什么语言，如果本地有语言就用本地的，没有则默认中文function lang() &#123; // 将选择的语言存在localStorage中 let t = localStorage.getItem('lang') if (t) return t // 默认中文 else return 'zh'&#125;const language = lang()const i18n = new VueI18n(&#123; locale: language, // 语言标识 //this.$i18n.locale // 通过切换locale的值来实现语言切换 messages: &#123; 'zh': require('./lib/lang/zh'), // 中文语言包 'en': require('./lib/lang/en') // 英文语言包 &#125; &#125;)//不要忘记/* eslint-disable no-new */new Vue(&#123; el: '#app', router, store, i18n, VueSocketIO, components: &#123; App &#125;, template: '&lt;App/&gt;'&#125;) 4.切换语言 最后我们只需要通过触发事件的形式，来控制 locale 的值，去调用对应的语言包就可以实现国际化啦。 12345678910changeLangEvent() &#123; if (localStorage.getItem("lang") === "zh") &#123; this.lang = "en"; this.$i18n.locale = this.lang; //关键语句 &#125; else &#123; this.lang = "zh"; this.$i18n.locale = this.lang; //关键语句 &#125; localStorage.setItem("lang", this.lang); &#125;, 6.渲染方式1&lt;span&gt;&#123;&#123;$t('m.music')&#125;&#125;&lt;/span&gt; 参考链接：https://blog.csdn.net/Dream_xun/article/details/82743762]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue-i18n</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-cookies]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue-cookies%2F</url>-->
    <url>/2019/08/07/vue-cookies/</url>
    <content type="text"><![CDATA[1.先安装1cnpm install vue-cookies --save-dev 2.在main.js引入123import Vue from 'Vue'import VueCookies from 'vue-cookies'Vue.use(VueCookies) 3.Api 设置 cookie： 1this.$cookies.set(keyName, time) //return this 获取cookie 1this.$cookies.get(keyName) // return value 删除 cookie 1this.$cookies.remove(keyName) // return false or true , warning： next version return this； use isKey(keyname) return true/false,please 查看一个cookie是否存在（通过keyName） 1this.$cookies.isKey(keyName) // return false or true 获取所有cookie名称 1this.$cookies.keys() // return a array 时间格式 Unit full name y 年 m 月 d 天 h 小时 min 分钟 s 秒 例如：1this.$cookies.set('key',value, '7d') //保存七天cookie Unit Names Ignore Case 参考链接：https://www.cnblogs.com/s313139232/p/9341762.html 资料来源：https://www.npmjs.com/package/vue-cookies]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue-cookies</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-clipboard2 实现复制粘贴]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue-clipboard2%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%2F</url>-->
    <url>/2019/08/07/vue-clipboard2%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4/</url>
    <content type="text"><![CDATA[1.先下载vue-clipboard21cnpm install vue-clipboard2 --save-dev 2.在main.js引入配置1234// 复制到粘贴板插件import VueClipboard from 'vue-clipboard2'VueClipboard.config.autoSetContainer = true // add this lineVue.use(VueClipboard) 3.在组件里面的用法html123456&lt;!--v-clipboard:copy="要复制的内容"--&gt;&lt;!-- v-clipboard:success="onCopy"，复制成功执行的函数--&gt;&lt;!--v-clipboard:error="onError",复制失败执行的函数--&gt;&lt;div class="footerButton copyBank" v-clipboard:copy="b.BankNo" v-clipboard:success="onCopy" v-clipboard:error="onError"&gt; &#123;&#123;$t("m.recharge.copyBank")&#125;&#125;&lt;/div&gt; js12345678910//复制成功执行的函数onCopy(e) &#123; this.isShowCopy=true; this.showCopyResult=this.$t("m.recharge.copySuccess"); &#125;,//复制失败执行的函数onError(e) &#123; this.isShowCopy=true; this.showCopyResult=this.$t("m.recharge.copyFail");&#125;, 参考链接]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue-clipboard2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue cli3=>vue cli2桥接]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue2.0%E5%88%B03.0%E7%9A%84%E6%A1%A5%E6%8E%A5%2F</url>-->
    <url>/2019/08/07/vue2.0%E5%88%B03.0%E7%9A%84%E6%A1%A5%E6%8E%A5/</url>
    <content type="text"><![CDATA[vue cli3=&gt;vue cli2桥接 1.先安装1npm install -g @vue/cli 2.再安装1npm install -g @vue/cli-service-global 3.最后安装桥接123456npm install -g @vue/cli-init//2.xvue init webpack my-project//3.xvue create my-project]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue cli3=&gt;vue cli2桥接</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue md5加密用法]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fvue%20md5%E5%8A%A0%E5%AF%86%E7%94%A8%E6%B3%95%2F</url>-->
    <url>/2019/08/07/vue%20md5%E5%8A%A0%E5%AF%86%E7%94%A8%E6%B3%95/</url>
    <content type="text"><![CDATA[1.先下载md51cnpm install js-md5 --save-dev 2.按需引入1234import md5 from "js-md5";//用法Pwd: md5(this.password) 3.或者在main.js文件中将md5转换成vue原型：1234import md5 from 'js-md5';Vue.prototype.$md5 = md5;//用法this.$md5('hello world') // 5eb63bbbe01eeed093cb22bb8f5acdc3]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>md5加密用法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[swiper用法]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fswiper%2F</url>-->
    <url>/2019/08/07/swiper/</url>
    <content type="text"><![CDATA[1.先下载1cnpm install swiper --save-dev 2.结构12345678910111213&lt;div class="swiper-container"&gt; &lt;div class="swiper-wrapper"&gt; &lt;div class="swiper-slide"&gt; &lt;img src="../../assets/img/mine/shopDetail.png" alt=""&gt;&lt;/div&gt; &lt;div class="swiper-slide"&gt; &lt;img src="../../assets/img/mine/shopDetail2.png" alt=""&gt;&lt;/div&gt; &lt;div class="swiper-slide"&gt; &lt;img src="../../assets/img/mine/shopDetail3.png" alt=""&gt;&lt;/div&gt; &lt;/div&gt; &lt;!-- 如果需要分页器 --&gt; &lt;div class="swiper-pagination"&gt;&lt;/div&gt;&lt;/div&gt; 3.js1234567891011121314151617181920212223242526272829303132//普通水平滑动轮播 swiper() &#123; var mySwiper = new Swiper(".swiper-container", &#123; speed: 500, loop: true, autoplay: &#123; disableOnInteraction: false, delay: 2500 &#125;, pagination: &#123; el: ".swiper-pagination", clickable: true, clickableClass: "my-pagination-clickable" &#125; &#125;); &#125;,//3d手动轮播 swiper() &#123; var mySwiper = new Swiper(".swiper-container", &#123; speed: 500, loop: true, autoplay: &#123; disableOnInteraction: false, delay: 2500 &#125;, pagination: &#123; el: ".swiper-pagination", clickable: true, clickableClass: "my-pagination-clickable" &#125; &#125;); &#125;, 4.样式 备注：样式需另起一个style写，不能用scoped锁住，只有这样才能覆盖swiper的样式， 切记要引入swiper的自带样式，去nodemodules里面找 1234567891011121314151617181920212223242526272829303132333435//分页器样式&lt;style lang="scss"&gt;@import "../../assets/css/reset.scss";@import "../../assets/css/swiper.min.css";.swiper-container .swiper-pagination &#123; width: 100%; height: rem(200); opacity: 1; z-index: 100000; padding-left: rem(315); position: absolute; left: rem(380); top: rem(306); span &#123; display: block; width: rem(12); height: rem(12); background-color: #fff; opacity: 1; float: left; margin-right: rem(20); z-index: 100000; border-radius: 50%; &#125; .swiper-pagination-bullet-active &#123; width: rem(22); height: rem(9); background-color: #e4bc7c; border-radius: rem(5); z-index: 100000; &#125;&#125;&lt;/style&gt;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>swiper用法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[目录]]></title>
    <!--<url>%2F2019%2F08%2F07%2FREADME%2F</url>-->
    <url>/2019/08/07/README/</url>
    <content type="text"><![CDATA[Echarts vue总结 GIT命令 watch配合computed监听props教程 vue技术点 vue中swiper简单教程 vue中md5教程 vue中animate.css教程 vue中v-touch事件用法 vue中websocket用法及封装 keepAlive使用方法 运用百度api实现定位城市 左滑动删除组件 图片上传组件upload vue动态绑定类名的几种方法 vue 移动端 实现div拖拽移动组件 vue cli3=&gt;vue cli2桥接 localStorage和sessionStorage的监听 pwa的简单介绍 vue+pwa教程 vue上传图片与压缩 vue-cookies用法 vue-pdf用法 vue-i18n用法例子 vue-clipboard2 实现复制粘贴 vue图片上传及压缩组件的封装 vue中scss的用法 vue判断手机移动端 vue给js加版本号 解决Vuex持久化插件-在F5刷新页面后数据不见的问题 webapp分享 解决keepAlive缓存bug 解决svn清理失败问题]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[localStorage和sessionStorage的监听]]></title>
    <!--<url>%2F2019%2F08%2F07%2FlocalStorage%E5%92%8CsessionStorage%E7%9A%84%E7%9B%91%E5%90%AC%2F</url>-->
    <url>/2019/08/07/localStorage%E5%92%8CsessionStorage%E7%9A%84%E7%9B%91%E5%90%AC/</url>
    <content type="text"><![CDATA[1.先在src下新建utils文件夹，新建tools.js，它会抛出一个dispatchEventStroage方法 1234567891011121314151617181920212223242526export default &#123; //localStorage dispatchEventStroage() &#123; const signSetItem = localStorage.setItem localStorage.setItem = function(key, val) &#123; let setEvent = new Event('setItemEvent') setEvent.key = key setEvent.newValue = val window.dispatchEvent(setEvent) signSetItem.apply(this, arguments) &#125; &#125;, //sessionStorage dispatchEventStroage_S() &#123; const signSetItem = sessionStorage.setItem sessionStorage.setItem = function(key, val) &#123; let setEvent = new Event('setItemEvent_s') setEvent.key = key setEvent.newValue = val window.dispatchEvent(setEvent) signSetItem.apply(this, arguments) &#125; &#125;&#125; 2.在main.js里面全局引入，并use，然后调用该dispatchEventStroage方法，以解决setitemEvent不会立即生效的问题12345import Tools from '@/utils/tools'Vue.use(Tools)// 为了解决setItemEvent不立即生效，使用事件派发强制更高Tools.dispatchEventStroage()Tools.dispatchEventStroage_S() 3.然后就可以使用了 如果我们在每次发送请求的时候都需要携带token字段，token有时候可以存在localstorage里面，但是当token发生改变时，我们js不知道已经改变，所以就需要用到以上方法了。 123456789const reqHeaders = &#123; Accept: 'text/json', // 第一次登录之后返回的token，之后每次请求都携带token字段进行验证 token: localStorage.getItem('token') || ''&#125;// window全局监听localStorage的setItem事件以及时更新window.addEventListener('setItemEvent', function (e) &#123; reqHeaders.token = e.newValue&#125;) 参考链接]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>localStorage</tag>
        <tag>sessionStorage</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue单页面，多路由，前进刷新，后退不刷新]]></title>
    <!--<url>%2F2019%2F08%2F07%2FkeepAlive%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>-->
    <url>/2019/08/07/keepAlive%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content type="text"><![CDATA[目的：vue-cli构建的vue单页面应用，某些特定的页面，实现前进刷新，后退不刷新，类似app般的用户体验。 注： 此处的刷新特指当进入此页面时，触发ajax请求，向服务器获取数据。不刷新特指当进入此页面时，不触发ajax请求，而是使用之前缓存的数据，以便减少服务器请求，用户体验更流畅。 1.在app.vue中改写router-view123456789&lt;keep-alive&gt; &lt;router-view v-if="$route.meta.keepAlive"&gt; &lt;!-- 这里是会被缓存的视图组件 --&gt; &lt;/router-view&gt;&lt;/keep-alive&gt; &lt;router-view v-if="!$route.meta.keepAlive"&gt; &lt;!-- 这里是不被缓存的视图组件 --&gt;&lt;/router-view&gt; 2.在router/index.js中添加路由元信息，设置需要缓存的页面123456789101112131415161718192021222324252627282930313233343536routes: [&#123; path: '/', name: 'index', component: index, meta: &#123; keepAlive: false, //此组件不需要被缓存 &#125; &#125;, &#123; path: '/page1', name: 'page1', component: page1, meta: &#123; keepAlive: true, //此组件需要被缓存 &#125; &#125;, &#123; path: '/page2', name: 'page2', component: page2, meta: &#123; keepAlive: true, // 此组件需要被缓存 isBack:false, //用于判断上一个页面是哪个 &#125; &#125;, &#123; path: '/page3', name: 'page3', component: page3, meta: &#123; keepAlive: false, // 此组件不需要被缓存 &#125; &#125;] 3.beforeRouteEnter中判断是从哪个页面过来的 判断是从哪个路由过来的，如果是page2过来的，表明当前页面不需要刷新获取新数据，直接用之前缓存的数据即可 12345678910111213beforeRouteEnter(to, from, next) &#123; // 路由导航钩子，此时还不能获取组件实例 `this`，所以无法在data中定义变量（利用vm除外） // 参考 https://router.vuejs.org/zh-cn/advanced/navigation-guards.html // 所以，利用路由元信息中的meta字段设置变量，方便在各个位置获取。这就是为什么在meta中定义isBack // 参考 https://router.vuejs.org/zh-cn/advanced/meta.html if(from.name=='page2')&#123; to.meta.keepAlive=true; //判断是从哪个路由过来的， //如果是page2过来的，表明当前页面不需要刷新获取新数据，直接用之前缓存的数据即可 &#125; next();&#125;, 钩子函数的执行顺序 不使用keep-alive beforeRouteEnter –&gt; created –&gt; mounted –&gt; destroyed 使用keep-alive beforeRouteEnter –&gt; created –&gt; mounted –&gt; activated –&gt; deactivated再次进入缓存的页面，只会触发beforeRouteEnter –&gt;activated –&gt; deactivated 。created和mounted不会再执行。我们可以利用不同的钩子函数，做不同的事。务必理解上述钩子函数的执行时机和执行顺序，本教程的核心就依赖于此钩子函数 activated和deactivated是使用keep-alive后，vue中比较重要的两个钩子函数，建议详细了解下。4.activated中执行getData这个获取数据的方法 因为这个页面需要缓存。只有第一次进入时才会执行created和mounted方法，再次进入就不执行了。而activated每次进入都执行，所以在这个钩子函数中获取数据。 123456789activated() &#123; if(!this.$route.meta.isBack)&#123; // 如果isBack是false，表明需要获取新数据，否则就不再请求，直接使用缓存的数据 this.getData(); &#125; // 恢复成默认的false，避免isBack一直是true，导致下次无法获取数据 this.$route.meta.isBack=false &#125; 参考链接]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建github账户]]></title>
    <!--<url>%2F2019%2F08%2F07%2Fgit%2F</url>-->
    <url>/2019/08/07/git/</url>
    <content type="text"><![CDATA[github官网 注册github，创建个人账户 [有需要可使用谷歌的页面翻译]需要验证邮箱，此时注意邮箱信息，（验证信息可能在邮箱垃圾箱中） 建立本地仓库与远程仓库的连接在本地创建一个ssh key 相当于在你的电脑中获取一个密匙，类似平常的验证码，获取后，输入到github账户里，则你的电脑就和github账户联系到一起了 首先，在桌面（或者其他文件夹都ok）右键打开 Git Bash Here，到bash控制台，出现如下 这一栏 开始是你的计算机的名字 @后边的内容是你的计算机型号，很多时候有的人打开之后@后边是乱码，这个时候也不要在意，因为有些电脑型号是中文的，可能在显示的时候出现了问题，不影响你后期的操作 黄色，文件夹名称 蓝色，当前所在分支名称（创建之后才有） 获取密匙，输入以下命令 12ssh-keygen-t rsa-C "your_email@youremail.com" //"your_email@youremail.com"表示在引号中输入你github绑定的邮箱地址 然后一路回车或yes 得到钥匙的随机图像（说明密匙创建成功） 在前面打开bash的文件夹中找到 .ssh文件，（若在桌面打开的，则进入 C:\Users\Administrator\.ssh），找到id_rsa.pub文件，用记事本打开，复制里面的内容（即密匙），如下所示。 1ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8h5j+/a2ANbzZhPuYWnqjgXwkBTBXOr/jgxZKZqB/gnKriwlaT3XVQVryFJ8Y9TrbIAetA736Jq6WSTt+5I2OsPIfxzQ9a91PI9UHl716HnwugD1pVFqxrwdrK5Psti4n1Q3L/iWkEp0guSxlKH4AP90xv+KoSKpi4mNPaIb4+dhE+hsKZIUfbioz7tEHLSq114aHREA6J+8EjgTLuX2xGthXjuFfsG2syBMV4Iec7qIZQtD1L7JK1cYhfWhrgTZg936hULT6+i7RnL53h1zKi015KZGtiquaJYvNHScK/PnV2azDgIiQQzUtf4B/pBKLGNZINrOZwKL+3y7fH8QB 1416271094@qq.com 到github账户上添加这个钥匙 （在Settings—&gt; SSH and GPG keys）里面，点击New SSH key 复制到key里面，title可以自己起随意的名字，然后Add SSH key，ok。 回到bash控制台,然后输入以下代码，来检查是否成功绑定。 123ssh -T git@github.com//第一次绑定的时候输入上边的代码之后会提示是否continue，在输入yes后如果出现了：You've successfully authenticated, but GitHub does not provide shell access 。那就说明，已经成功连上了GitHub。 设置用户名和邮箱，输入以下代码，name最好和GitHub上边的一样，email是一定要是注册GitHub的那个邮箱地址 （遇到的问题，我的两个github账号都是同一个邮箱，报错，后面会说到） 12$ git config --global user.name "你的github用户名"$ git config --global user.email "你的github账号绑定的邮箱账号" 将项目库克隆到本地文件夹中，或者将本地文件添加到项目库中，（此时，先创建项目库） 创建项目库 右上角加号 new repository ,然后按步骤填写项目库名称，最后 create repository 就可以了 拿到项目库地址 可以复制使用上面的https或ssh 地址，进行clone到本地创建文件夹 也直接复制使用git remote add origin https://github.com/OneEightZeroSix/hujiang.git命令将本地文件推入到该项目库中 将项目克隆到项目库中 自己在电脑任意盘中，新建一个任意文件夹，或者直接在任意盘中，打开 git bash 可以输入 ls 查看你目前所定位的文件夹中的文件有哪些，（可做可不做） 1ls 开始克隆！！！ 1git clone https://github.com/....(也就是上面的项目库地址) 会出现警告：warning: You appear to have cloned an empty.git,不要担心，这时候项目库的文件夹已经克隆到你的文件夹中啦~ 然后 定位到 克隆下来的文件夹中，或者进入克隆下来的文件夹，再打开 git bash 将文件添加到缓存区 123git add . //添加文件夹中的所有文件到缓存区或：git add test.txt //添加test文档文件到缓存区 将缓存区里的文件提交到本地版本库（嗯嗯嗯，我也不是很懂这些名词，照做了，哈哈） 1git commit -m "这里写你的备注，可以记录刚刚提交的文件是什么文件之类的" 将本地项目推送到远程仓库 1git push origin master 嗯，如果上面推入成功就ok，若出现下面内容，就输入你的github账号密码，然后login 若出现下面，则失败,就再输入一次github密码 成功页面 之后修改文件再提交的话，只需要 git add . 、git commit -m “ “ 、最后git push origin master，将你的代码提交就可以了。 将本地已经存在的文件中添加到github项目库中 本地文件已经存在了，现在要将本地代码推到git远程仓库保存。 （先进入项目文件夹）通过命令 git init 把这个目录变成git可以管理的仓库 1git init 把文件添加到版本库中，使用命令 git add .添加到暂存区里面去，不要忘记后面的小数点“.”，意为添加文件夹下的所有文件 1git add . 用命令 git commit告诉Git，把文件提交到本地版本库。引号内为提交说明 （方便之后查看提交了什么） 1git commit -m "这是我第一次commit的内容" 关联到远程库 123git remote add origin 你的远程库地址地址如：git remote add origin https://github.com/OneEightZeroSix/hujiang.git 【特别提醒】 我在本次操作中，在执型 git add .的命令时就已经报错 然后，查看了本地工作区、暂存区中文件的修改状态 1git status 从图中我们可以看到有一条红色和两条绿色得提示。- 第一条绿色提示的前缀为newfile，表示为新增XXX文件。 第二条绿色提示得前缀为deleted，表示为删除了XXX文件。 橙色框框选的部分提示Changes tobe committed ，含义为：以下文件已存入暂存区，在提交到本地仓库时会将这些变更提交到本地仓库中。 最底下红色提示的前缀为modified，表示为修改XXX文件。 git status命令就可以看到你本次修改（新增、删除、修改）中涉及到哪些文件，同时也可以看到已经存入暂存区中发生修改变更的文件，便于检查具体修改了哪些文件，以免出现疏漏。 再次连接到远程仓库 1git remote add origin https://github.com/OneEightZeroSix/hujiang.git 再执行 1git add . 提交到仓库 1git commit -m "这是我的项目" 推到分支中(不报错就完成) 1git push origin master 报错：403错误 关于用了两个github账号，新旧账号邮箱地址是一样的，虽然查看本地仓库的用户和邮箱都是新账号的，但是push的时候一直出现403错误 ，大概意思就是，不能将当前内容推送到旧的那个账号上 网上有其他解决方式，我是~ 到电脑的控制面板 控制面板\用户帐户和家庭安全\凭据管理器 进入编辑，把账户密码改成现在使用的github的账户密码 git查看和修改用户名和邮箱地址用户名和邮箱地址的作用 用户名和邮箱地址是本地git客户端的一个变量，不随git库而改变。 每次commit都会用用户名和邮箱纪录。 github的contributions统计就是按邮箱来统计的。 查看用户名和邮箱地址：12$ git config user.name "你的github用户名"$ git config user.email "你的github账号绑定的邮箱账号" 或全局配置 12$ git config --global user.name "你的github用户名"$ git config --global user.email "你的github账号绑定的邮箱账号" 修改用户名和邮箱地址：注意:输入的时候用户名和邮箱不用引号 12$ git config user.name "name"$ git config user.email "email" 或全局配置 12$ git config --global user.name "username"$ git config --global user.email "email" 如果上面的命令错误，出现了–repalce-all 这个东西。 可以尝试使用： 12$ git config --global --replace-all user.email "username" $ git config --global --replace-all user.name "email" 查看git设置列表信息1$ git config --list 文件夹中如果存在文件夹，要一个一个添加]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue中Echart用法]]></title>
    <!--<url>%2F2019%2F08%2F07%2FEcharts%2F</url>-->
    <url>/2019/08/07/Echarts/</url>
    <content type="text"><![CDATA[一、先下载echarts1cnpm install echarts --save-dev 二、在main.js中引入123import echarts from 'echarts'Vue.prototype.$echarts = echarts 三、新建hours.vue组件1234567&lt;div&gt; &lt;div id="myChart" :style="&#123; height: '140px'&#125;"&gt;&lt;/div&gt; &lt;p class="title"&gt;伦敦金&lt;/p&gt; &lt;p class="percent1"&gt;&#123;&#123;percent1&#125;&#125;.00%&lt;/p&gt; &lt;p class="percent2"&gt;&#123;&#123;percent2&#125;&#125;.00%&lt;/p&gt; &lt;p class="time"&gt;数据更新时间：&#123;&#123;year&#125;&#125;&amp;nbsp;&#123;&#123;time&#125;&#125;&lt;/p&gt;&lt;/div&gt; 四、在methods里面写这段代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293 mounted() &#123; this.drawLine(); //执行下面的函数 &#125;,methods: &#123; drawLine() &#123; // var i=0; // 基于准备好的dom，初始化echarts实例 let myChart = this.$echarts.init(document.getElementById("myChart")); var color = ["#19D672", "#FD517D"]; // 绘制图表 myChart.setOption(&#123; color: ["#23D864", "#FF4D51"], // title: &#123; text: '伦敦金' &#125;, tooltip: &#123; trigger: "item", formatter: "&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)" &#125;, legend: [ &#123; // orient: "vertical", itemWidth: 15, x: "2%", y: "20%", textStyle: &#123; // color: '#ccc', &#125;, data: ["买跌"] &#125;, &#123; itemWidth: 15, // orient: "vertical", x: "80%", y: "20%", data: ["买涨"] &#125; ], series: [ &#123; name: "访问来源", type: "pie", data: ["20%", "80%"], radius: ["42%", "50%"], center: ["50%", "35%"], avoidLabelOverlap: false, label: &#123; normal: &#123; show: false, position: "center" &#125;, emphasis: &#123; show: true, textStyle: &#123; fontSize: "0", fontWeight: "bold" &#125; &#125; &#125;, labelLine: &#123; normal: &#123; show: false &#125; &#125;, itemStyle: &#123; top: "50" // borderWidth: 50, //设置border的宽度有多大 &#125;, data: [ &#123; value: this.percent1, name: "买跌", a: "1" &#125;, &#123; value: this.percent2, name: "买涨", a: "1" &#125; ] &#125; ] &#125;); &#125; &#125; 五、整体代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172&lt;template&gt;&lt;div&gt; &lt;div&gt; &lt;div id=&quot;myChart&quot; :style=&quot;&#123; height: &apos;140px&apos;&#125;&quot;&gt;&lt;/div&gt; &lt;p class=&quot;title&quot;&gt;伦敦金&lt;/p&gt; &lt;p class=&quot;percent1&quot;&gt;&#123;&#123;percent1&#125;&#125;.00%&lt;/p&gt; &lt;p class=&quot;percent2&quot;&gt;&#123;&#123;percent2&#125;&#125;.00%&lt;/p&gt; &lt;p class=&quot;time&quot;&gt;数据更新时间：&#123;&#123;year&#125;&#125;&amp;nbsp;&#123;&#123;time&#125;&#125;&lt;/p&gt; &lt;/div&gt; &lt;pieChart /&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import pieChart from &quot;./pieChart.vue&quot;;export default &#123; components: &#123; pieChart &#125;, data() &#123; return &#123; percent1: 30, percent2: 70, year: &quot;2018-10-20&quot;, time: &quot;10:05:03&quot; &#125;; &#125;, mounted() &#123; this.drawLine(); &#125;, methods: &#123; drawLine() &#123; // var i=0; // 基于准备好的dom，初始化echarts实例 let myChart = this.$echarts.init(document.getElementById(&quot;myChart&quot;)); var color = [&quot;#19D672&quot;, &quot;#FD517D&quot;]; // 绘制图表 myChart.setOption(&#123; color: [&quot;#23D864&quot;, &quot;#FF4D51&quot;], // title: &#123; text: &apos;伦敦金&apos; &#125;, tooltip: &#123; trigger: &quot;item&quot;, formatter: &quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)&quot; &#125;, legend: [ &#123; // orient: &quot;vertical&quot;, itemWidth: 15, x: &quot;2%&quot;, y: &quot;20%&quot;, textStyle: &#123; // color: &apos;#ccc&apos;, &#125;, data: [&quot;买跌&quot;] &#125;, &#123; itemWidth: 15, // orient: &quot;vertical&quot;, x: &quot;80%&quot;, y: &quot;20%&quot;, data: [&quot;买涨&quot;] &#125; ], series: [ &#123; name: &quot;访问来源&quot;, type: &quot;pie&quot;, data: [&quot;20%&quot;, &quot;80%&quot;], radius: [&quot;42%&quot;, &quot;50%&quot;], center: [&quot;50%&quot;, &quot;35%&quot;], avoidLabelOverlap: false, label: &#123; normal: &#123; show: false, position: &quot;center&quot; &#125;, emphasis: &#123; show: true, textStyle: &#123; fontSize: &quot;0&quot;, fontWeight: &quot;bold&quot; &#125; &#125; &#125;, labelLine: &#123; normal: &#123; show: false &#125; &#125;, itemStyle: &#123; top: &quot;50&quot; // borderWidth: 50, //设置border的宽度有多大 &#125;, data: [ &#123; value: this.percent1, name: &quot;买跌&quot;, a: &quot;1&quot; &#125;, &#123; value: this.percent2, name: &quot;买涨&quot;, a: &quot;1&quot; &#125; ] &#125; ] &#125;); &#125; &#125;&#125;;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;@import &quot;../../assets/css/reset.scss&quot;;div &#123; padding: 0 rem(30); #myChart &#123; border-bottom: rem(1) solid $line_color; &#125; position: relative; .title &#123; position: absolute; left: 44%; top: 29%; font-size: rem(30); &#125; .percent1 &#123; position: absolute; left: 10%; top: 35%; font-size: rem(32); color: #333; font-weight: bold; line-height: rem(55); &#125; .percent2 &#123; position: absolute; right: 10%; top: 35%; font-size: rem(32); color: #333; font-weight: bold; line-height: rem(55); &#125; .time &#123; position: absolute; left: 24%; top: 70%; &#125;&#125;&lt;/style&gt; 效果图如下：]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Echart</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue keepAlive移除缓存(代替this.$destroy())]]></title>
    <!--<url>%2F2019%2F08%2F07%2F%E8%A7%A3%E5%86%B3keepAlive%E7%BC%93%E5%AD%98bug%2F</url>-->
    <url>/2019/08/07/%E8%A7%A3%E5%86%B3keepAlive%E7%BC%93%E5%AD%98bug/</url>
    <content type="text"><![CDATA[需求 注册页面有一个，点击去查看协议的入口，此时当客户填写了数据，从协议页面回来之后数据就会清空，所以我选择了用keepAlive，但是用第一种方式发现缓存的始终都是第一次填写的东西，如果用this.$destroy()就再也不能缓存了，所以经过多方探查，用了第二种方案完美解决。… 需求 注册页面有一个，点击去查看协议的入口，此时当客户填写了数据，从协议页面回来之后数据就会清空，所以我选择了用keepAlive，但是用第一种方式发现缓存的始终都是第一次填写的东西，如果用this.$destroy()就再也不能缓存了，所以经过多方探查，用了第二种方案完美解决。 router.js12345678910111213import Vue from 'vue'import Router from 'vue-router'Vue.use(Router) export default new Router(&#123; routes: [&#123; path: '/register', name: 'register', component: resolve =&gt; require(['@/pages/sign/register.vue'], resolve), meta: &#123; keepAlive: true, // 此组件需要被缓存 &#125; &#125;] 1.第一种方案12345678910beforeRouteLeave(to, from, next) &#123; if (to.name === "useAgreement") &#123; from.meta.keepAlive = true; //当我们进入到C时开启B的缓存 next(); &#125; else &#123; from.meta.keepAlive = false; this.$destroy() next(); //当我们前进的不是C时我们让B页面刷新 &#125; &#125;, 2.第二种方案：在路由跳转里动态判断移除缓存使用Vue.mixin的方法拦截了路由离开事件，并在该拦截方法中实现后退时销毁页面缓存。 1234567891011121314151617181920212223242526272829303132333435363738// 使用Vue.mixin的方法拦截了路由离开事件，并在该拦截方法中实现了销毁页面缓存的功能。 Vue.mixin(&#123; beforeRouteLeave: function(to, from, next) &#123; // 默认是缓存的 在来清除 // 1.用tag标记控制 判断上下级 // if (from &amp;&amp; from.meta.tag &amp;&amp; to.meta.tag &amp;&amp; (from.meta.tag-to.meta.tag&lt;1)) // 2.直接用组件名字来写 不够通用 // if (from.path == '/docMng' &amp;&amp; to.path == '/docMng/docDetail') &#123; // 3. 用包含关系来判断 通用 console.log(to, from) if (to.path.indexOf('useAgreement') != -1 &amp;&amp; from.name == 'register') &#123; from.meta.keepAlive = true; &#125; else &#123; // if (from &amp;&amp; from.meta.tag &amp;&amp; to.meta.tag &amp;&amp; (from.meta.tag-to.meta.tag&lt;1))&#123; if (this.$vnode &amp;&amp; this.$vnode.data.keepAlive &amp;&amp; from.name == 'register' &amp;&amp; to.path.indexOf('home') != -1) &#123; if (this.$vnode.parent &amp;&amp; this.$vnode.parent.componentInstance &amp;&amp; this.$vnode.parent.componentInstance.cache) &#123; if (this.$vnode.componentOptions) &#123; var key = this.$vnode.key == null ? this.$vnode.componentOptions.Ctor.cid + (this.$vnode.componentOptions.tag ? `::$&#123;this.$vnode.componentOptions.tag&#125;` : '') : this.$vnode.key var cache = this.$vnode.parent.componentInstance.cache var keys = this.$vnode.parent.componentInstance.keys if (cache[key]) &#123; if (keys.length) &#123; var index = keys.indexOf(key) if (index &gt; -1) &#123; keys.splice(index, 1) &#125; &#125; delete cache[key] &#125; &#125; &#125; from.meta.keepAlive = true; &#125; // this.$destroy() &#125; next() &#125; &#125;) 参考链接1 参考链接2…]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>keepalive</tag>
      </tags>
  </entry>
</search>
